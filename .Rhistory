#summary(model)
#want to predict fish forebrain from wholebrain
predictions <- predict(model, newdata = data.frame(wb_NC_count_million = c(74, 130)))
#do i need to remove human outlier?
#plot for viewing purposes
# Plot the data
plot(NC_dat$wb_NC_count_million, NC_dat$f_NC_count_million,
xlab = "Wholebrain NC Count (million)",
ylab = "Forebrain NC Count (million)",
main = "Linear Fit: Forebrain vs Wholebrain NC Count",
pch = 16, col = "blue")
# Add the regression line using the fitted model (uses slope and intercept from 'model')
abline(model, col = "red", lwd = 2)
# Add a grid for readability
grid()
predictions
log_model <- lm(log(f_NC_count_million) ~ log(wb_NC_count_million), data = NC_dat)
lm_model <- lm(f_NC_count_million ~ wb_NC_count_million, data = NC_dat)
lm_model <- lm(f_NC_count_million ~ wb_NC_count_million, data = NC_dat)
log_model <- lm(log(f_NC_count_million) ~ log(wb_NC_count_million), data = NC_dat)
#summary(model)
#want to predict fish forebrain from wholebrain
lm_predictions <- predict(lm_model, newdata = data.frame(wb_NC_count_million = c(74, 130)))
log_predictions <- predict(log_model, newdata = data.frame(wb_NC_count_million = c(74, 130)))
# Plot the log-transformed data
plot(log(NC_dat$wb_NC_count_million), log(NC_dat$f_NC_count_million),
xlab = "log(Wholebrain NC Count)",
ylab = "log(Forebrain NC Count)",
main = "Log-Log Fit: Forebrain vs Wholebrain NC Count",
pch = 16, col = "blue")
# Add the regression line (log-log)
abline(log_model, col = "red", lwd = 2)
# Add a grid for readability
grid()
log_predictions
log_predictions <- exp(predict(log_model, newdata = data.frame(wb_NC_count_million = c(74, 130))))
log_predictions
summary(log_model)
#This file conducts simple analysis of the time series from the calculations gsheet
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm)
#read in time series from google sheet -> excel
calc_tseries <- read_excel("first_pass/calc_tseries.xlsx") #sheet = 3 sometimes needed
#input NC potentially manually from sheet
human_fneurons <- 24560000000
calc_tseries <- calc_tseries %>%
mutate(forebrain_neurons = case_when(
Category == "Humans" ~ human_fneurons,
Category == "Fish" ~ 43853820,
Category == "Asses" ~ 1.20E+08,
Category == "Bees" ~ 170000,
Category == "Buffalo" ~ 794523333,
Category == "Camels" ~ 907460000,
Category == "Cattle" ~ 790000000,
Category == "Chickens" ~ 86000000,
Category == "Ducks" ~ 112255000,
Category == "Geese" ~ 203533500,
Category == "Goats" ~ 504000000,
Category == "Horses" ~ 120000000,
Category == "Mules and hinnies" ~ 1.20E+08,
Category == "Other birds" ~ 20523000,
Category == "Other camelids" ~ 907460000,
Category == "Other rodents" ~ 31500000,
Category == "Swine / pigs" ~ 554000000,
Category == "Rabbits and hares" ~ 101000000,
Category == "Sheep" ~ 504000000,
Category == "Turkeys" ~ 86000000 )) %>%
mutate(NC_potential = forebrain_neurons/human_fneurons,
NC_pop = aliveatanytime*NC_potential,
NC_utility = aliveatanytime*NC_potential*Welfare_level,
WR_pop = aliveatanytime*WR_potential,
WR_utility = aliveatanytime*WR_potential*Welfare_level)
#save to file
write.xlsx(calc_tseries, "first_pass/calc_tseries.xlsx")
#This file conducts simple analysis produces correlations, elasticities,
#factor changes, and other summary variables from using calc_tseries from
#prep_calc_tseries.R
## differs from analysis.R bc trying to write it to streamline with any pop, potential, and utility metrics
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm)
# Read in the updated time series
ts <- read_excel("first_pass/calc_tseries.xlsx")
########### NET SERIES (total utility, potential-weighted pop) #################
# --- 1) Global window and net series ---
# Determine the common years across all categories for global summaries
year_bounds <- ts %>%
group_by(Category) %>%
summarize(
min_y = min(Year, na.rm = TRUE),
max_y = max(Year, na.rm = TRUE)
)
common_window <- year_bounds %>%
summarize(
start = max(min_y),
end   = min(max_y)
)
# Trim to global window
ts_global <- ts %>%
filter(Year >= common_window$start,
Year <= common_window$end)
# Compute and save net series
net_series <- ts_global %>%
group_by(Year) %>%
summarize(
net_WR_utility = sum(WR_utility,   na.rm = FALSE),
net_NC_utility = sum(NC_utility, na.rm = FALSE),
net_NC_pop     = sum(NC_pop,        na.rm = FALSE),
net_WR_pop     = sum(WR_pop,        na.rm = FALSE)
)
write.xlsx(net_series, "first_pass/net_series.xlsx")
################ CORRELATIONS AND ELASTICITIES ###################
# --- 2) Human baseline series ---
human_series <- ts %>%
filter(Category == "Humans") %>%
select(Year,
human_pop = aliveatanytime,
human_u   = NC_utility) #note that human NC_utility == WR_utility if all is going well
# --- 3) Category-specific correlations & elasticities ---
# Define target variables
regressand  <- c("aliveatanytime", "NC_pop", "WR_pop", "NC_utility", "WR_utility") #dependent
regressor <- c("human_pop", "human_u") #independent
## we're going to end up getting correlations + elasticities of all five of
## these variables on the human pop and utility variables for each animal
## category
# Initialize results
target_cats <- setdiff(unique(ts$Category), "Humans")
results <- tibble(
Category = character(),
Regressor = character(),
Regressand = character(),
Correlation = double(),
Elasticity = double()
)
#for each non-human cateogry, pair each of the regressands on each of the
#regressors
for(cat in target_cats) {
for(ror in regressor) {
for(rand in regressand) {
cat_data <- ts %>% filter(Category == cat)
# Determine non-NA ranges
#note that .data[[ror]]: accesses the column named by the variable
#ror (not the literal string "ror").
h_nonNA <- human_series %>% filter(!is.na(.data[[ror]]))
c_nonNA <- cat_data     %>% filter(!is.na(.data[[rand]]))
start_year <- max(min(h_nonNA$Year), min(c_nonNA$Year))
end_year   <- min(max(h_nonNA$Year), max(c_nonNA$Year))
# Filter vectors within range
h_vec <- h_nonNA %>%
filter(Year >= start_year, Year <= end_year) %>%
pull(.data[[ror]])
c_vec <- c_nonNA %>%
filter(Year >= start_year, Year <= end_year) %>%
pull(.data[[rand]])
# Compute statistics
cor_val  <- cor(h_vec, c_vec, use = "complete.obs")
elas_val <- coef(lm(c_vec ~ h_vec))[2] #which of these should involve log regressions?
# Append to results
results <- results %>% add_row(
Category    = cat,
Regressor = ror,
Regressand = rand,
Correlation = cor_val,
Elasticity  = elas_val
)
}
}
}
}
#for each non-human cateogry, pair each of the regressands on each of the
#regressors
for(cat in target_cats) {
for(ror in regressor) {
for(rand in regressand) {
cat_data <- ts %>% filter(Category == cat)
# Determine non-NA ranges
#note that .data[[ror]]: accesses the column named by the variable
#ror (not the literal string "ror").
h_nonNA <- human_series %>% filter(!is.na(.data[[ror]]))
c_nonNA <- cat_data     %>% filter(!is.na(.data[[rand]]))
start_year <- max(min(h_nonNA$Year), min(c_nonNA$Year))
end_year   <- min(max(h_nonNA$Year), max(c_nonNA$Year))
# Filter vectors within range
h_vec <- h_nonNA %>%
filter(Year >= start_year, Year <= end_year) %>%
pull(.data[[ror]])
c_vec <- c_nonNA %>%
filter(Year >= start_year, Year <= end_year) %>%
pull(.data[[rand]])
# Compute statistics
cor_val  <- cor(h_vec, c_vec, use = "complete.obs")
elas_val <- coef(lm(c_vec ~ h_vec))[2] #which of these should involve log regressions?
# Append to results
results <- results %>% add_row(
Category    = cat,
Regressor = ror,
Regressand = rand,
Correlation = cor_val,
Elasticity  = elas_val
)
}
}
}
# Save results
write.xlsx(results, "first_pass/cor_and_elas_new.xlsx")
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm)
# Read in the updated time series
ts <- read_excel("first_pass/calc_tseries.xlsx")
########### NET SERIES (total utility, potential-weighted pop) #################
# --- 1) Global window and net series ---
# Determine the common years across all categories for global summaries
year_bounds <- ts %>%
group_by(Category) %>%
summarize(
min_y = min(Year, na.rm = TRUE),
max_y = max(Year, na.rm = TRUE)
)
common_window <- year_bounds %>%
summarize(
start = max(min_y),
end   = min(max_y)
)
# Trim to global window
ts_global <- ts %>%
filter(Year >= common_window$start,
Year <= common_window$end)
# Compute and save net series
net_series <- ts_global %>%
group_by(Year) %>%
summarize(
net_WR_utility = sum(WR_utility,   na.rm = FALSE),
net_NC_utility = sum(NC_utility, na.rm = FALSE),
net_NC_pop     = sum(NC_pop,        na.rm = FALSE),
net_WR_pop     = sum(WR_pop,        na.rm = FALSE)
)
write.xlsx(net_series, "first_pass/net_series.xlsx")
################ CORRELATIONS AND ELASTICITIES ###################
# --- 2) Human baseline series ---
human_series <- ts %>%
filter(Category == "Humans") %>%
select(Year,
human_pop = aliveatanytime,
human_u   = NC_utility) #note that human NC_utility == WR_utility if all is going well
# --- 3) Category-specific correlations & elasticities ---
# Define target variables
regressand  <- c("aliveatanytime", "NC_pop", "WR_pop", "NC_utility", "WR_utility") #dependent
regressor <- c("human_pop", "human_u") #independent
## we're going to end up getting correlations + elasticities of all five of
## these variables on the human pop and utility variables for each animal
## category
# Initialize results
target_cats <- setdiff(unique(ts$Category), "Humans")
results <- tibble(
Category = character(),
Regressor = character(),
Regressand = character(),
Correlation = double(),
Elasticity = double()
)
#for each non-human cateogry, pair each of the regressands on each of the
#regressors
for(cat in target_cats) {
for(ror in regressor) {
for(rand in regressand) {
cat_data <- ts %>% filter(Category == cat)
# Determine non-NA ranges
#note that .data[[ror]]: accesses the column named by the variable
#ror (not the literal string "ror").
h_nonNA <- human_series %>% filter(!is.na(.data[[ror]]))
c_nonNA <- cat_data     %>% filter(!is.na(.data[[rand]]))
start_year <- max(min(h_nonNA$Year), min(c_nonNA$Year))
end_year   <- min(max(h_nonNA$Year), max(c_nonNA$Year))
# Filter vectors within range
h_vec <- h_nonNA %>%
filter(Year >= start_year, Year <= end_year) %>%
pull(.data[[ror]])
c_vec <- c_nonNA %>%
filter(Year >= start_year, Year <= end_year) %>%
pull(.data[[rand]])
# Compute statistics
cor_val  <- cor(h_vec, c_vec, use = "complete.obs")
elas_val <- coef(lm(c_vec ~ h_vec))[2] #which of these should involve log regressions?
# Append to results
results <- results %>% add_row(
Category    = cat,
Regressor = ror,
Regressand = rand,
Correlation = cor_val,
Elasticity  = elas_val
)
}
}
}
# Save results
write.xlsx(results, "first_pass/cor_and_elas.xlsx")
# Plot 1: Population over time
ggplot(calc_tseries, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time - Selected Captive Animals", y = "Population (alive at any time)", x = "Year") +
theme_minimal()
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, pdf, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm)
calc_tseries <- read_excel("first_pass/calc_tseries.xlsx")
net_series <- read_excel("first_pass/net_series.xlsx")
ggplot(calc_tseries, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time - Selected Captive Animals", y = "Population (alive at any time)", x = "Year") +
theme_minimal()
ggsave("first_pass/NC_graphs/population_trends_f.pdf", width = 10, height = 6)
# Plot 2: Utility over time (by category)
ggplot(filtered_data, aes(x = Year, y = utility, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Utility Over Time - Selected Captive Animals", y = "Utility", x = "Year") +
theme_minimal()
# Plot 2: Utility over time (by category)
ggplot(calc_tseries, aes(x = Year, y = utility, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Utility Over Time - Selected Captive Animals", y = "Utility", x = "Year") +
theme_minimal()
# Plot 2: WR Utility over time (by category)
ggplot(calc_tseries, aes(x = Year, y = WR_utility, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Utility Over Time - Selected Captive Animals", y = "Utility", x = "Year") +
theme_minimal()
# Plot 2: WR Utility over time (by category)
ggplot(calc_tseries, aes(x = Year, y = WR_utility, colour = Category, group = interaction(Group, Category))) +
geom_line(na.rm = TRUE) + #the default setting, where NA values give line breaks. this just supresses the warning
labs(title = "Utility Over Time - Selected Captive Animals", y = "Utility", x = "Year") +
theme_minimal()
ggsave("first_pass/NC_graphs/A2_WR_utility_trends_f.pdf", width = 10, height = 6)
# Plot 2: WR Utility over time (by category)
ggplot(calc_tseries, aes(x = Year, y = WR_utility, colour = Category, group = interaction(Group, Category))) +
geom_line(na.rm = TRUE) + #the default setting, where NA values give line breaks. this just supresses the warning
labs(title = "Utility Over Time - Welfare Range method", y = "Utility", x = "Year") +
theme_minimal()
ggsave("first_pass/NC_graphs/A2_WR_utility_trends_f.pdf", width = 10, height = 6)
# Plot 3: NC Utility over time (by category)
ggplot(calc_tseries, aes(x = Year, y = NC_utility, colour = Category, group = interaction(Group, Category))) +
geom_line(na.rm = TRUE) + #the default setting, where NA values give line breaks. this just supresses the warning
labs(title = "Utility Over Time - Neuron Count method", y = "Utility", x = "Year") +
theme_minimal()
ggsave("first_pass/NC_graphs/A3_NC_utility_trends_f.pdf", width = 10, height = 6)
#Plot 4: NC Utility over time -- no humans (by category)
cts_no_humans <- calc_tseries %>%
filter(!Category == "Humans")
ggplot(cts_no_humans, aes(x = Year, y = NC_utility, colour = Category, group = interaction(Group, Category))) +
geom_line(na.rm = TRUE) + #the default setting, where NA values give line breaks. this just supresses the warning
labs(title = "Utility Over Time - Neuron Count method - No Humans", y = "Utility", x = "Year") +
theme_minimal()
ggsave("first_pass/NC_graphs/A4_NC_utility_trends_f_nh.pdf", width = 10, height = 6)
#Plot 5: NC Utility over time -- no humans, no fish (by category)
cts_no_humans_fish <- cts_no_humans %>%
filter(!Category == "Fish")
ggplot(cts_no_humans_fish, aes(x = Year, y = NC_utility, colour = Category, group = interaction(Group, Category))) +
geom_line(na.rm = TRUE) + #the default setting, where NA values give line breaks. this just supresses the warning
labs(title = "Utility Over Time - Neuron Count method - No Humans, No Fish", y = "Utility", x = "Year") +
theme_minimal()
ggsave("first_pass/NC_graphs/A5_NC_utility_trends_f_nhf.pdf", width = 10, height = 6)
View(cts_no_humans)
#Plot 6: NC Utility over time -- no humans, no fish, now chicken (by category)
cts_no_humans_fish_chickens <- cts_no_humans_fish %>%
filter(!Category == "Chickens")
ggplot(cts_no_humans_fish_chickens, aes(x = Year, y = NC_utility, colour = Category, group = interaction(Group, Category))) +
geom_line(na.rm = TRUE) + #the default setting, where NA values give line breaks. this just supresses the warning
labs(title = "Utility Over Time - Neuron Count method - No Humans, No Fish", y = "Utility", x = "Year") +
theme_minimal()
ggsave("first_pass/NC_graphs/A6_NC_utility_trends_f_nhfc.pdf", width = 10, height = 6)
ggplot(net_utility, aes(x = Year, y = net_NC_utility)) +
geom_line(na.rm = FALSE) + #na.rm false excludes from the graph when values are missing
geom_hline(yintercept = 0, color = "grey70", linetype = "dashed", linewidth = 0.5) +  # light horizontal line at y = 0
labs(title = "Net Utility Over Time - Humans and Selected Captive Animals",
y = "Net Utility",
x = "Year") +
theme_minimal()
ggplot(net_series, aes(x = Year, y = net_WR_utility)) +
geom_line(na.rm = FALSE) + #na.rm false excludes from the graph when values are missing
geom_hline(yintercept = 0, color = "grey70", linetype = "dashed", linewidth = 0.5) +  # light horizontal line at y = 0
labs(title = "Net Utility Over Time - Humans and Selected Captive Animals",
y = "Net Utility",
x = "Year") +
theme_minimal()
ggplot(net_series, aes(x = Year, y = net_WR_utility)) +
geom_line(na.rm = TRUE) + #na.rm false excludes from the graph when values are missing
geom_hline(yintercept = 0, color = "grey70", linetype = "dashed", linewidth = 0.5) +  # light horizontal line at y = 0
labs(title = "Net Utility Over Time - Humans and Selected Captive Animals",
y = "Net Utility",
x = "Year") +
theme_minimal()
?geom_line
### Humans and selected farm animals (currently encompassing)
ggplot(net_series, aes(x = Year, y = net_NC_utility)) +
geom_line(na.rm = FALSE) + #na.rm regardless the setting = T or F, missing values are removed. = FALSE issues a warning. = TRUE suppresses
geom_hline(yintercept = 0, color = "grey70", linetype = "dashed", linewidth = 0.5) +  # light horizontal line at y = 0
labs(title = "Net Utility Over Time - Neuron Count method",
y = "Net Utility",
x = "Year") +
theme_minimal()
############    B. NET NC UTILITY   ##########
### Humans and selected farm animals (currently encompassing)
ggplot(net_series, aes(x = Year, y = net_NC_utility)) +
geom_line(na.rm = FALSE) + #na.rm regardless the setting = T or F, missing values are removed. = FALSE issues a warning. = TRUE suppresses
geom_hline(yintercept = 0, color = "grey70", linetype = "dashed", linewidth = 0.5) +  # light horizontal line at y = 0
labs(title = "Net Utility Over Time - Neuron Count method",
y = "Net Utility",
x = "Year") +
theme_minimal()
ggsave("first_pass/NC_graphs/B1_net_NC_utility_trends_f.pdf", width = 10, height = 6)
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm)
# Read in the updated time series
ts <- read_excel("first_pass/calc_tseries.xlsx")
########### NET SERIES (total utility, potential-weighted pop) #################
# --- 1) Global window and net series ---
# Determine the common years across all categories for global summaries
year_bounds <- ts %>%
group_by(Category) %>%
summarize(
min_y = min(Year, na.rm = TRUE),
max_y = max(Year, na.rm = TRUE)
)
common_window <- year_bounds %>%
summarize(
start = max(min_y),
end   = min(max_y)
)
# Trim to global window
ts_global <- ts %>%
filter(Year >= common_window$start,
Year <= common_window$end)
# Compute and save net series
net_series <- ts_global %>%
group_by(Year) %>%
summarize(
net_WR_utility = sum(WR_utility,   na.rm = FALSE),
net_NC_utility = sum(NC_utility, na.rm = FALSE),
net_NC_pop     = sum(NC_pop,        na.rm = FALSE),
net_WR_pop     = sum(WR_pop,        na.rm = FALSE)
)
write.xlsx(net_series, "first_pass/net_series.xlsx")
########### NET SERIES NO HUMAN (total utility, potential-weighted pop) ########
# --- 1) Global window and net series ---
# Determine the common years across all categories for global summaries
ts_nh <- ts %>%
filter(!Category == "Humans")
View(ts_nh)
########### NET SERIES NO HUMAN (total utility, potential-weighted pop) ########
# --- 1) Global window and net series ---
# Determine the common years across all categories for global summaries
ts_nh <- ts %>%
filter(!Category == "Humans")
year_bounds_nh <- ts_nh %>%
group_by(Category) %>%
summarize(
min_y = min(Year, na.rm = TRUE),
max_y = max(Year, na.rm = TRUE)
)
common_window_nh <- year_bounds_nh %>%
summarize(
start = max(min_y),
end   = min(max_y)
)
# Trim to global window
ts_global_nh <- ts_nh %>%
filter(Year >= common_window_nh$start,
Year <= common_window_nh$end)
# Compute and save net series
net_series_nh <- ts_global_nh %>%
group_by(Year) %>%
summarize(
net_WR_utility = sum(WR_utility,   na.rm = FALSE),
net_NC_utility = sum(NC_utility, na.rm = FALSE),
net_NC_pop     = sum(NC_pop,        na.rm = FALSE),
net_WR_pop     = sum(WR_pop,        na.rm = FALSE)
)
write.xlsx(net_series_nh, "first_pass/net_series_nh.xlsx")
# Merge with full join to keep all years
combined_series <- full_join(
net_series %>% select(Year, net_NC_utility_all = net_NC_utility),
net_series_nh %>% select(Year, net_NC_utility_no_human = net_NC_utility),
by = "Year"
)
# Reshape to long format for ggplot
long_series <- combined_series %>%
pivot_longer(cols = starts_with("net_NC_utility"),
names_to = "Series",
values_to = "Net_Utility") %>%
mutate(
Series = recode(Series,
"net_NC_utility_all" = "With Humans",
"net_NC_utility_no_human" = "Without Humans")
)
# Plot with ggplot
ggplot(long_series, aes(x = Year, y = Net_Utility, color = Series)) +
geom_line(na.rm = TRUE) +  # This will skip NAs at the ends without error
geom_hline(yintercept = 0, color = "grey70", linetype = "dashed", linewidth = 0.5) +
labs(title = "Net Utility Over Time - Neuron Count Method",
y = "Net Utility",
x = "Year",
color = "Series") +
theme_minimal()
View(long_series)
View(combined_series)
View(net_series_nh)
# Save
ggsave("first_pass/NC_graphs/net_utility_comparison.pdf", width = 10, height = 6)
# Save
ggsave("first_pass/NC_graphs/B2_net_utility_comparison.pdf", width = 10, height = 6)
