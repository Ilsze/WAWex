splist$g2 = as.integer(factor(splist$Breeding.Biome))
grps = as.matrix(splist[,c("g1","g2")])
ngroups1 = max(grps[,1])
ngroups2 = max(grps[,2])
ident = function(x){
return(x)
}
logthetahat <- as.matrix(tapply(indices[,"logthetahat"],indices[,c("spfact","year_i")],ident))
prec.logthetahat <- as.matrix(tapply(indices[,"prec.logthetahat"],indices[,c("spfact","year_i")],ident))
ne = splist$popest #population estimate
tau.ne = 1/splist$popse^2 #precision of population estimate
#
#
yest = (splist$year_est1-base.yr)+1 # first year over which species population should be averaged
yavg = 1+(splist$year_est2-splist$year_est1) ## number of years over which to average the species population estimate
##### species group indexing
subgrps = unique(grps)
subgrps = subgrps[order(subgrps[,1],subgrps[,2]),]
nsubgrps = table(subgrps[,1])
subgrpsl = matrix(NA,ncol = ngroups1,nrow = max(nsubgrps))
nsppsubbiomesmat = table(grps[,1],grps[,2])
spsubgrpmat = array(NA,dim = c(ngroups1,ngroups2,max(nsppsubbiomesmat)))
for(i in 1:ngroups1){
subs = subgrps[which(subgrps[,1] == i),2]
subgrpsl[1:nsubgrps[i],i] = subs
for(j in subs){
spsubgrpmat[i,j,1:nsppsubbiomesmat[i,j]] = which(grps[,1] == i & grps[,2] == j)
}
}#i
#### breeding biome indexing
nsppbiomes = table(grps[,2])
spinbiomes = matrix(NA,nrow = max(nsppbiomes),ncol = max(ngroups2))
for(g in 1:ngroups2){
spinbiomes[1:nsppbiomes[g],g] <- which(grps[,2] == g)
}
### wintering biome indexing
nsppwinters = table(grps[,1])
spinwinters = matrix(NA,nrow = max(nsppwinters),ncol = max(ngroups1))
for(g in 1:ngroups1){
spinwinters[1:nsppwinters[g],g] <- which(grps[,1] == g)
}
### indexing for family summaries
splist$famfact = (factor(splist$Family))
splist$famfactn = as.integer(factor(splist$Family))
nsppfams = table(splist$famfact)
spinfams = matrix(NA,nrow = max(nsppfams),ncol = length(nsppfams))
for(f in 1:length(nsppfams)){
fn = names(nsppfams)[f]
spinfams[1:nsppfams[f],f] <- which(splist$Family == fn)
}
nfams = length(nsppfams)
fams = unique(splist[,c("Family","famfact","famfactn")])
fams = fams[order(fams$famfactn),]
#indexing for bird.group summaries
splist$birdgroupfact = (factor(splist$bird.group))
splist$birdgroupfactn = as.integer(factor(splist$bird.group))
nsppbirdgroups = table(splist$birdgroupfact)
spinbirdgroups = matrix(NA,nrow = max(nsppbirdgroups),ncol = length(nsppbirdgroups))
for(f in 1:length(nsppbirdgroups)){
fn = names(nsppbirdgroups)[f]
spinbirdgroups[1:nsppbirdgroups[f],f] <- which(splist$bird.group == fn)
}
nbirdgroups = length(nsppbirdgroups)
birdgroups = unique(splist[,c("bird.group","birdgroupfact","birdgroupfactn")])
birdgroups = birdgroups[order(birdgroups$birdgroupfactn),]
#indexing for migration summaries
splist$migratefact = (factor(splist$Migrate))
splist$migratefactn = as.integer(factor(splist$Migrate))
nsppmigrates = table(splist$migratefact)
spinmigrates = matrix(NA,nrow = max(nsppmigrates),ncol = length(nsppmigrates))
for(f in 1:length(nsppmigrates)){
fn = names(nsppmigrates)[f]
spinmigrates[1:nsppmigrates[f],f] <- which(splist$Migrate == fn)
}
nmigrates = length(nsppmigrates)
migrates = unique(splist[,c("Migrate","migratefact","migratefactn")])
migrates = migrates[order(migrates$migratefactn),]
#indexing for ai summaries
splist$aifact = (factor(splist$AI))
splist$aifactn = as.integer(factor(splist$AI))
nsppais = table(splist$aifact)
spinais = matrix(NA,nrow = max(nsppais),ncol = length(nsppais))
for(f in 1:length(nsppais)){
fn = names(nsppais)[f]
spinais[1:nsppais[f],f] <- which(splist$AI == fn)
}
nais = length(nsppais)
ais = unique(splist[,c("AI","aifact","aifactn")])
ais = ais[order(ais$aifactn),]
#indexing for native summaries
splist$nativefact = (factor(splist$native))
splist$nativefactn = as.integer(factor(splist$native))
nsppnatives = table(splist$nativefact)
spinnatives = matrix(NA,nrow = max(nsppnatives),ncol = length(nsppnatives))
for(f in 1:length(nsppnatives)){
fn = names(nsppnatives)[f]
spinnatives[1:nsppnatives[f],f] <- which(splist$native == fn)
}
nnatives = length(nsppnatives)
natives = unique(splist[,c("native","nativefact","nativefactn")])
natives = natives[order(natives$nativefactn),]
#imputing the missing data with assumptions of no-change from most recent year with data and gradually decreasing precision
wspecieslate = as.integer(splist[which(splist$firstyear > 1970),"spfact"])
yearswo1late = rep(1,nspecies)
yearswo2late = (splist[,"firstyear"])-1970
wspeciesearly = as.integer(splist[which(splist$lastyear < 2017),"spfact"])
yearswo1early = (splist[,"lastyear"]+1)-1969
yearswo2early = rep(nyears,nspecies)
yearsw1 = (splist[,"firstyear"])-1969
yearsw2 = (splist[,"lastyear"])-1969
prec.powdrop = 2 #exponential function for decreasing precision with years (i.e., precision decreases with square of the years since real data)
for( s in wspecieslate) { # wspecieslate = vector of species that don't have data in year-1
for(y in yearswo1late[s]:yearswo2late[s]){
logthetahat[s,y] <- logthetahat[s,yearsw1[s]]
prec.logthetahat[s,y] <- prec.logthetahat[s,yearsw1[s]]/((yearsw1[s]-y)^prec.powdrop)#
}}
### imputing missing data for species without data at the end of the time series
## currently assumes that the precision decreases with the square of the number of years since the last data
for( s in wspeciesearly) { # wspecieslate = vector of species that don't have data in year-1
for(y in yearswo1early[s]:yearswo2early[s]){
logthetahat[s,y] <- logthetahat[s,yearsw2[s]]
prec.logthetahat[s,y] <- prec.logthetahat[s,yearsw2[s]]/((y-yearsw2[s])^prec.powdrop)#
}}
data.jags = list(nspecies = nspecies,
nyears = nyears,
logthetahat = logthetahat,
prec.logthetahat = prec.logthetahat,
ne = ne,
tau.ne = tau.ne,
yest = yest,
ngroups1 = ngroups1,
ngroups2 = ngroups2,
grps = grps,
yavg = yavg,
spinbiomes = spinbiomes,
nsppbiomes = nsppbiomes,
spinfams = spinfams,
nsppfams = nsppfams,
nfams = nfams,
spinbirdgroups = spinbirdgroups,
nsppbirdgroups = nsppbirdgroups,
nbirdgroups = nbirdgroups,
spinmigrates = spinmigrates,
nsppmigrates = nsppmigrates,
nmigrates = nmigrates,
spinais = spinais,
nsppais = nsppais,
nais = nais,
spinwinters = spinwinters,
nsppwinters = nsppwinters,
spinnatives = spinnatives,
nsppnatives = nsppnatives,
nnatives = nnatives,
subgrpsl = subgrpsl,
nsubgrps = nsubgrps,
nsppsubbiomesmat = nsppsubbiomesmat,
spsubgrpmat = spsubgrpmat)
params = c("expmu1",
#"expm2",
"expmu2",
"Psi",
"tau",
"NEst",
"Nsum",
"N",
"Nlost",
"Nalost",
"Nlost.S",
"Nlost.fam",
"Nlost.biome",
"Nalost.fam",
"Nlost.migrate",
"Nalost.migrate",
"plost.migrate",
"Nlost.birdgroup",
"Nalost.birdgroup",
"plost.birdgroup",
"Nlost.ai",
"Nalost.ai",
"plost.ai",
"plost.native",
"Nlost.native",
"Nalost.native",
"plost.winter",
"Nlost.winter",
"Nalost.winter",
"Nalost.biome",
"plost.fam",
"plost.biome",
"plost",
"Nsum.subgrp")
mod = "Rosenberg et al model.txt"
adaptSteps = 500              # Number of steps to "tune" the samplers.
burnInSteps = 30000            # Number of steps to "burn-in" the samplers.
nChains = 3                   # Number of chains to run.
numSavedSteps=10000           # Total number of steps to save per chain.
thinSteps=50                   # Number of steps to "thin" (1=keep every step).
nIter = ceiling( ( (numSavedSteps * thinSteps ) + burnInSteps) / nChains ) # Steps per chain.
t1 = Sys.time()
jagsMod = jags(data = data.jags,
model.file = mod,
n.chains = nChains,
n.adapt = adaptSteps,
n.burnin = burnInSteps,
n.thin = thinSteps,
n.iter = nIter+burnInSteps,
parameters.to.save = params,
parallel = T)
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, foreign, broom, knitr, data.table)
#load US SWB data
swb_us <- read_rds("./data/int_val_surv/swb_us.rds")
# Function to create plot with connected points and best fit line
create_plot <- function(data, y_var, title, y_label) {
ggplot(data, aes(x = S020, y = !!sym(y_var))) +
geom_line() +  # Connect points with a line
geom_point() +  # Add points
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +  # Add best fit line
theme_minimal() +
labs(title = title,
x = "Year",
y = y_label) +
scale_x_continuous(breaks = unique(data$S020))
}
# Create plots
plot_satisfaction <- create_plot(swb_us, "mean_life_satisfaction",
"Mean Life Satisfaction in the US Over Time",
"Mean Life Satisfaction")
plot_happiness <- create_plot(swb_us, "mean_happiness",
"Mean Happiness in the US Over Time",
"Mean Happiness")
# Display the plots
print(plot_satisfaction)
print(plot_happiness)
#display them side by side
grid.arrange(plot_satisfaction, plot_happiness, ncol = 2)
# If you want to save the plots, you can use ggsave:
# ggsave("life_satisfaction_plot.png", plot_satisfaction, width = 10, height = 6)
# ggsave("happiness_plot.png", plot_happiness, width = 10, height = 6)
#swb_us as it is, summarised, in latex format:
kable(swb_us, format = "latex")
############################# EXTRAPOLATION
# Create linear models
lm_satisfaction <- lm(mean_life_satisfaction ~ S020, data = swb_us)
lm_happiness <- lm(mean_happiness ~ S020, data = swb_us)
# Create a data frame with all years from 1970 to 2017
all_years <- data.frame(S020 = 1970:2017)
# Predict values for all years
predictions <- all_years %>%
mutate(
mean_life_satisfaction = predict(lm_satisfaction, newdata = .),
mean_happiness = predict(lm_happiness, newdata = .)
)
# Combine predictions with actual data, preferring actual data where available
final_table <- predictions %>%
left_join(swb_us, by = "S020") %>%
mutate(
mean_life_satisfaction = coalesce(mean_life_satisfaction.y, mean_life_satisfaction.x),
mean_happiness = coalesce(mean_happiness.y, mean_happiness.x)
) %>%
select(S020, mean_life_satisfaction, mean_happiness) %>%
#rename S020 column to Time
rename(Time = S020)
#final_table is a dataset with three columns: Time, mean_life_satisfaction, and mean_happiness
########### POP DATA
#load pop data
#un_dat <- read_csv("./data/un/WPP2024_Population1JanuaryBySingleAgeSex_Medium_1950-2023.csv.gz") #commented out bc un_7023 is saved
#filter for north american region/subregion/country/area
## Bermuda is LocID 60. Greenland is LocID 304. Saint Pierre and Miquelon is 666. Each are excluded due to bird data probs not there
## Canada is locID 124
## USA is LocID 840
###############################################################################
########################## COMMENTED OUT BECAUSE SAVED un_7023 ###############
# un_f <- un_dat %>%
#   select("LocID", "Location", "PopTotal", "Time") %>%
#   filter(LocID == 840 | LocID == 124) %>%
#   #at this point, still differentiated by age group
#   group_by(Time) %>%
#   summarise(PopTot = sum(PopTotal)) %>%
#   ungroup()
#
# #keep 1970 to 2017
# un_7023 <- filter(un_f, Time >= 1970)
# #save to avoid having to load un_dat again
# write_rds(un_7023, "./data/un/un_7023.rds")
###############################################################################
###############################################################################
#note that population counts are in 1000s. The colnames are Time and PopTot
#read un_7023 if neccesary
un_7023 <- readRDS("~/GitHub/WAWex/data/un/un_7023.rds")
#merge un_7023 and final_table
na_pop_us_swb <- merge(final_table, un_7023, by = "Time", all = TRUE) %>%
#only keep up to 2017
filter(Time < 2018) %>%
#multiply PopTot by a thousand to it's now in individuals not thousands of individuals
mutate(PopTot = PopTot*1000,
LSTot = PopTot*mean_life_satisfaction)
#LSTot is the variable we're interested in, standing for total life satisfaction at that period of time
#load bird data UTH
overall_bird_n <- read_csv("./AdamCSmithCWS-Estimating_Change_in_NorthAmerican_Birds-a78d595/overall avifauna trajectories N and loss.csv") %>%
select("year", "N_med", "Loss_med")
#merge with the rest of the data
# Assuming na_pop_us_swb has "Time" column and overall_bird_n has "year" column
# First rename year in bird dataset to match the other data
names(overall_bird_n)[names(overall_bird_n) == "year"] <- "Time"
# Merge the datasets
swb_bird_na <- merge(na_pop_us_swb,
overall_bird_n[c("Time", "N_med", "Loss_med")],
by = "Time",
all.x = TRUE)
# Order by Time if not already
swb_bird_na <- swb_bird_na[order(swb_bird_na$Time),]
################## RAW BIRD, SWB, TIME DATA HAS NOW BEEN ACHIEVED. time_swb_bird.png plot can now be made.
################## NOW GET BIRDS LOST PER UTIL DATA
#produce number of birds lost per util
#number of LS utils in base year
base_LS <- swb_bird_na$LSTot[[1]]
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = LSTot - base_LS, #cumulative LS compared to 1970 baseline
LS_per_bird_c = ifelse(Loss_med == 0, NA, LS_c / Loss_med), #cumulative LS per bird
N_med_d = N_med - lag(N_med, default = first(N_med)), #change in bird year-to-year
LS_d = LSTot - lag(LSTot, default = first(LSTot)), #change in LS year-to-year
LS_per_bird_d = ifelse(N_med_d == 0, NA, LS_d / N_med_d)) #LS gained per bird lost that year
## NOT SURE IF NEWLY MADE VALUES PASS SANITY CHECK???
#LS_c makes sense
View(swb_bird_na)
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = LSTot - base_LS, #cumulative LS compared to 1970 baseline
LS_per_bird_c = ifelse(Loss_med == 0, NA, -LS_c / Loss_med), #cumulative LS per bird lost
N_med_d = N_med - lag(N_med, default = first(N_med)), #change in bird year-to-year
LS_d = LSTot - lag(LSTot, default = first(LSTot)), #change in LS year-to-year
LS_per_bird_d = ifelse(N_med_d == 0, NA, LS_d / N_med_d)) #LS gained per bird lost that year
## NOT SURE IF NEWLY MADE VALUES PASS SANITY CHECK???
#LS_c makes sense
# Rename Loss_med to Loss_med_c to indicate cumulative status
names(overall_bird_n)[names(overall_bird_n) == "Loss_med"] <- "Loss_med_c"
# Merge the datasets
swb_bird_na <- merge(na_pop_us_swb,
overall_bird_n[c("Time", "N_med", "Loss_med_c")],
by = "Time",
all.x = TRUE)
# Order by Time if not already
swb_bird_na <- swb_bird_na[order(swb_bird_na$Time),]
################## RAW BIRD, SWB, TIME DATA HAS NOW BEEN ACHIEVED. time_swb_bird.png plot can now be made.
################## NOW GET BIRDS LOST PER UTIL DATA
#produce number of birds lost per util
#number of LS utils in base year
base_LS <- swb_bird_na$LSTot[[1]]
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = LSTot - base_LS, #cumulative LS compared to 1970 baseline
LS_per_bird_c = ifelse(Loss_med_c == 0, NA, -LS_c / Loss_med_c), #cumulative LS per cumulative bird lost. (-) sign is because bird loss is negative
N_med_d = N_med - lag(N_med, default = first(N_med)), #change in bird year-to-year
LS_d = LSTot - lag(LSTot, default = first(LSTot)), #change in LS year-to-year
LS_per_bird_d = ifelse(N_med_d == 0, NA, LS_d / N_med_d)) #LS gained per bird lost that year
#now get bird swb using Hadza baseline
LS_constant_Hadza <- 8.245
swb_bird_na <- swb_bird_na %>%
mutate(LSTot_bird = N_med * 8.245)
?lag
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = cumsum(LSTot),
LS_per_bird_c = ifelse(Loss_med_c == 0, NA, -LS_c / Loss_med_c), #cumulative LS per cumulative bird lost. (-) sign is because bird loss is negative
N_med_d = N_med - lag(N_med, default = first(N_med)), #change in bird year-to-year
LS_d = LSTot - lag(LSTot, default = first(LSTot)), #change in LS year-to-year
LS_per_bird_d = ifelse(N_med_d == 0, NA, LS_d / N_med_d)) #LS gained per bird lost that year
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = cumsum(LSTot) - base_LS,
LS_per_bird_c = ifelse(Loss_med_c == 0, NA, -LS_c / Loss_med_c), #cumulative LS per cumulative bird lost. (-) sign is because bird loss is negative
N_med_d = N_med - lag(N_med, default = first(N_med)), #change in bird year-to-year
LS_d = LSTot - lag(LSTot, default = first(LSTot)), #change in LS year-to-year
LS_per_bird_d = ifelse(N_med_d == 0, NA, LS_d / N_med_d)) #LS gained per bird lost that year
overall_bird_n <- read_csv("./AdamCSmithCWS-Estimating_Change_in_NorthAmerican_Birds-a78d595/overall avifauna trajectories N and loss.csv") %>%
select("year", "N_med", "Loss_med")
#merge with the rest of the data
# Assuming na_pop_us_swb has "Time" column and overall_bird_n has "year" column
# First rename year in bird dataset to match the other data
names(overall_bird_n)[names(overall_bird_n) == "year"] <- "Time"
# Rename Loss_med to Loss_med_c to indicate cumulative status
names(overall_bird_n)[names(overall_bird_n) == "Loss_med"] <- "Loss_med_c"
# Merge the datasets
swb_bird_na <- merge(na_pop_us_swb,
overall_bird_n[c("Time", "N_med", "Loss_med_c")],
by = "Time",
all.x = TRUE)
# Order by Time if not already
swb_bird_na <- swb_bird_na[order(swb_bird_na$Time),]
################## RAW BIRD, SWB, TIME DATA HAS NOW BEEN ACHIEVED. time_swb_bird.png plot can now be made.
################## NOW GET BIRDS LOST PER UTIL DATA
#produce number of birds lost per util
#number of LS utils in base year
base_LS <- swb_bird_na$LSTot[[1]]
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = cumsum(LSTot) - base_LS,
LS_per_bird_c = ifelse(Loss_med_c == 0, NA, -LS_c / Loss_med_c), #cumulative LS per cumulative bird lost. (-) sign is because bird loss is negative
N_med_d = N_med - lag(N_med, default = first(N_med)), #change in bird year-to-year
LS_d = LSTot - lag(LSTot, default = first(LSTot)), #change in LS year-to-year
LS_per_bird_d = ifelse(N_med_d == 0, NA, LS_d / N_med_d)) #LS gained per bird lost that year
#now get bird swb using Hadza baseline
LS_constant_Hadza <- 8.245
swb_bird_na <- swb_bird_na %>%
mutate(LSTot_bird = N_med * LS_constant_Hadza, #LS points accruing to birds that year
LS_bird_c = Loss_med_c * LS_constant_Hadza, #LS points lost to birds since 1970
LS_per_bird_LS_c = LS_c/LS_bird_c) #LS points gained by humans since 1970 for every bird LS lost since 1970
LS_constant_Hadza <- 8.245
swb_bird_na <- swb_bird_na %>%
mutate(LSTot_bird = N_med * LS_constant_Hadza, #LS points accruing to birds that year
LS_bird_c = Loss_med_c * LS_constant_Hadza, #LS points lost to
swb_bird_na <- swb_bird_na %>%
mutate(LSTot_bird = N_med * LS_constant_Hadza, #LS points accruing to birds that year
LS_bird_c = -Loss_med_c * LS_constant_Hadza, #LS points lost to birds since 1970 (-) sign is because bird loss is negative
LS_per_bird_LS_c = ifelse(LS_bird_c == 0, NA, LS_c/LS_bird_c)) #LS points gained by humans since 1970 for every bird LS lost since 1970
swb_bird_na <- swb_bird_na %>%
swb_bird_na <- swb_bird_na %>%
mutate(LSTot_bird = N_med * LS_constant_Hadza, #LS points accruing to birds that year
LS_bird_c = -Loss_med_c * LS_constant_Hadza, #LS points lost to birds since 1970. (-) sign is because bird loss is negative
LS_per_bird_LS_c = ifelse(LS_bird_c == 0, NA, LS_c/LS_bird_c))
View(swb_bird_na)
################## NOW GET BIRDS LOST PER UTIL DATA
#produce number of birds lost per util
#number of LS utils in base year
LSTot_base <- swb_bird_na$LSTot[[1]]
LSTot_base <- swb_bird_na$LSTot[[1]]
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = LSTot - LSTot_base + lag(LS_c))
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = if_else(row_number() == 1, 0, (LSTot - LSTot_base) + lag(LS_c)))
View(swb_bird_na)
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = case_when(
row_number() == 1 ~ 0,
row_number() == 2 ~ LSTot - LSTot_base,  # Second row just gets the first difference
TRUE ~ (LSTot - LSTot_base) + lag(LS_c)
))
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = 0) %>%  # Initialize first
mutate(LS_c = LSTot - LSTot_base + lag(LS_c, default = 0))  # Then calculate cumulative
head(swb_bird_na)
LSTot_base <- swb_bird_na$LSTot[[1]]
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = 0) %>%
mutate(LS_c = (LSTot - LSTot_base) + lag(LS_c, default = 0)) %>%
# Add a print statement to verify calculations
mutate(check = LSTot - LSTot_base + lag(LS_c, default = 0))
LSTot_base <- swb_bird_na$LSTot[[1]]
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = LSTot - LSTot_base) %>%
mutate(LS_c = cumsum(LS_c) + lag(LS_c, default = 0))
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = cumsum(LSTot) + row_number()*LSTot_base)
?cumsum
LSTot_base
head(swb_bird_na)
swb_bird_na <- swb_bird_na %>%
mutate(LS_c = sapply(1:n(), function(i) sum(LSTot[1:i])) - row_number()*LSTot_base)
N_med_base <- swb_bird_na$N_med[[1]]
N_med_base
overall_bird_n <- read_csv("./AdamCSmithCWS-Estimating_Change_in_NorthAmerican_Birds-a78d595/overall avifauna trajectories N and loss.csv") %>%
select("year", "N_med", "Loss_med")
#merge with the rest of the data
# Assuming na_pop_us_swb has "Time" column and overall_bird_n has "year" column
# First rename year in bird dataset to match the other data
names(overall_bird_n)[names(overall_bird_n) == "year"] <- "Time"
# Merge the datasets
swb_bird_na <- merge(na_pop_us_swb,
overall_bird_n[c("Time", "N_med", "Loss_med")],
by = "Time",
all.x = TRUE)
# Order by Time if not already
swb_bird_na <- swb_bird_na[order(swb_bird_na$Time),]
################## RAW BIRD, SWB, TIME DATA HAS NOW BEEN ACHIEVED. time_swb_bird.png plot can now be made.
################## NOW GET BIRDS LOST PER UTIL DATA
#produce number of birds lost per util
#number of LS utils in base year
LSTot_base <- swb_bird_na$LSTot[[1]]
N_med_base <- swb_bird_na$N_med[[1]]
swb_bird_na <- swb_bird_na %>%
#In all the years from 1970 to the present year, how many extra LS-points do North American humans have compared to if population and LS per person hadn't changed since 1970?
mutate(LS_c = sapply(1:n(), function(i) sum(LSTot[1:i])) - row_number()*LSTot_base,
#In all the years from 1970 to the present year, how many extra birds were lost compared to if bird populations hadn't changed since 1970?
Loss_med_c = sapply(1:n(), function(i) -sum(N_med[1:i])) + row_number()*N_med_base
)
swb_bird_na <- swb_bird_na %>%
#In all the years from 1970 to the present year, how many extra LS-points do North American humans have compared to if population and LS per person hadn't changed since 1970?
mutate(LS_c = sapply(1:n(), function(i) sum(LSTot[1:i])) - row_number()*LSTot_base,
#In all the years from 1970 to the present year, how many extra birds were lost compared to if bird populations hadn't changed since 1970?
Loss_med_c = sapply(1:n(), function(i) -sum(N_med[1:i])) + row_number()*N_med_base, #sign flip to report loss as a positive number
#In all the years from 1970 to the present year, how many extra bird LS points were lost compared to if bird populations hadn't changed since 1970?
Loss_LS_bird_c = Loss_med_c * LS_constant_Hadza
)
swb_bird_na <- swb_bird_na %>%
#In all the years from 1970 to the present year, how many extra LS-point-years do North American humans have compared to if population and LS per person hadn't changed since 1970?
mutate(LS_c = sapply(1:n(), function(i) sum(LSTot[1:i])) - row_number()*LSTot_base,
#In all the years from 1970 to the present year, how many extra bird-years were lost compared to if bird populations hadn't changed since 1970?
Loss_med_c = sapply(1:n(), function(i) -sum(N_med[1:i])) + row_number()*N_med_base, #sign flip to report loss as a positive number
#In all the years from 1970 to the present year, how many extra bird LS-point-years were lost compared to if bird populations hadn't changed since 1970?
Loss_LS_bird_c = Loss_med_c * LS_constant_Hadza,
#In all the years from 1970 to the present year, how many human LS-point-years were gained for every bird-year lost?
LS_per_bird_c = LS_c/Loss_med_c,
#In all the years from 1970 to the present year, how many human LS-point-years were gained for every bird LS-point-year lost?
LS_per_bird_LS_c = LS_c/Loss_LS_bird_c)
swb_bird_na <- swb_bird_na %>%
#In all the years from 1970 to the present year, how many extra LS-point-years do North American humans have compared to if population and LS per person hadn't changed since 1970?
mutate(LS_c = sapply(1:n(), function(i) sum(LSTot[1:i])) - row_number()*LSTot_base,
#In all the years from 1970 to the present year, how many extra bird-years were lost compared to if bird populations hadn't changed since 1970?
Loss_med_c = sapply(1:n(), function(i) -sum(N_med[1:i])) + row_number()*N_med_base, #sign flip to report loss as a positive number
#In all the years from 1970 to the present year, how many extra bird LS-point-years were lost compared to if bird populations hadn't changed since 1970?
Loss_LS_bird_c = Loss_med_c * LS_constant_Hadza,
#In all the years from 1970 to the present year, how many human LS-point-years were gained for every bird-year lost?
LS_per_bird_c = ifelse(Loss_med_c == 0, NA, LS_c/Loss_med_c),
#In all the years from 1970 to the present year, how many human LS-point-years were gained for every bird LS-point-year lost?
LS_per_bird_LS_c = ifelse(Loss_med_c == 0, NA, LS_c/Loss_LS_bird_c))
