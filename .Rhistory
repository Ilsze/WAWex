# Check data validity
has_valid_pop_data <- !all(is.na(human_pop_trunc)) && !all(is.na(animal_pop_trunc)) &&
sum(!is.na(human_pop_trunc) & !is.na(animal_pop_trunc)) > 1
has_valid_wr_utility_data <- !all(is.na(human_wr_u_trunc)) && !all(is.na(animal_wr_u_trunc)) &&
sum(!is.na(human_wr_u_trunc) & !is.na(animal_wr_u_trunc)) > 1
has_valid_nc_utility_data <- !all(is.na(human_nc_u_trunc)) && !all(is.na(animal_nc_u_trunc)) &&
sum(!is.na(human_nc_u_trunc) & !is.na(animal_nc_u_trunc)) > 1
# Calculate all metrics for this grouping
# Population correlations and elasticities
cor_pop <- if(has_valid_pop_data) {
tryCatch(cor(human_pop_trunc, animal_pop_trunc, use = "complete.obs"), error = function(e) NA)
} else NA
e_pop <- if(has_valid_pop_data) {
tryCatch(coef(lm(animal_pop_trunc ~ human_pop_trunc))[2], error = function(e) NA)
} else NA
# WR utility correlations
wr_cor_u <- if(has_valid_wr_utility_data) {
tryCatch(cor(human_wr_u_trunc, animal_wr_u_trunc, use = "complete.obs"), error = function(e) NA)
} else NA
wr_cor_hpop_au <- if(!all(is.na(human_pop_trunc)) && !all(is.na(animal_wr_u_trunc)) &&
sum(!is.na(human_pop_trunc) & !is.na(animal_wr_u_trunc)) > 1) {
tryCatch(cor(human_pop_trunc, animal_wr_u_trunc, use = "complete.obs"), error = function(e) NA)
} else NA
wr_cor_hu_apop <- if(!all(is.na(human_wr_u_trunc)) && !all(is.na(animal_pop_trunc)) &&
sum(!is.na(human_wr_u_trunc) & !is.na(animal_pop_trunc)) > 1) {
tryCatch(cor(human_wr_u_trunc, animal_pop_trunc, use = "complete.obs"), error = function(e) NA)
} else NA
# WR utility elasticities
wr_e_u <- if(has_valid_wr_utility_data) {
tryCatch(coef(lm(animal_wr_u_trunc ~ human_wr_u_trunc))[2], error = function(e) NA)
} else NA
wr_e_hpop_au <- if(!all(is.na(human_pop_trunc)) && !all(is.na(animal_wr_u_trunc)) &&
sum(!is.na(human_pop_trunc) & !is.na(animal_wr_u_trunc)) > 1) {
tryCatch(coef(lm(animal_wr_u_trunc ~ human_pop_trunc))[2], error = function(e) NA)
} else NA
wr_e_hu_apop <- if(!all(is.na(human_wr_u_trunc)) && !all(is.na(animal_pop_trunc)) &&
sum(!is.na(human_wr_u_trunc) & !is.na(animal_pop_trunc)) > 1) {
tryCatch(coef(lm(animal_pop_trunc ~ human_wr_u_trunc))[2], error = function(e) NA)
} else NA
# NC utility correlations
nc_cor_u <- if(has_valid_nc_utility_data) {
tryCatch(cor(human_nc_u_trunc, animal_nc_u_trunc, use = "complete.obs"), error = function(e) NA)
} else NA
nc_cor_hpop_au <- if(!all(is.na(human_pop_trunc)) && !all(is.na(animal_nc_u_trunc)) &&
sum(!is.na(human_pop_trunc) & !is.na(animal_nc_u_trunc)) > 1) {
tryCatch(cor(human_pop_trunc, animal_nc_u_trunc, use = "complete.obs"), error = function(e) NA)
} else NA
nc_cor_hu_apop <- if(!all(is.na(human_nc_u_trunc)) && !all(is.na(animal_pop_trunc)) &&
sum(!is.na(human_nc_u_trunc) & !is.na(animal_pop_trunc)) > 1) {
tryCatch(cor(human_nc_u_trunc, animal_pop_trunc, use = "complete.obs"), error = function(e) NA)
} else NA
# NC utility elasticities
nc_e_u <- if(has_valid_nc_utility_data) {
tryCatch(coef(lm(animal_nc_u_trunc ~ human_nc_u_trunc))[2], error = function(e) NA)
} else NA
nc_e_hpop_au <- if(!all(is.na(human_pop_trunc)) && !all(is.na(animal_nc_u_trunc)) &&
sum(!is.na(human_pop_trunc) & !is.na(animal_nc_u_trunc)) > 1) {
tryCatch(coef(lm(animal_nc_u_trunc ~ human_pop_trunc))[2], error = function(e) NA)
} else NA
nc_e_hu_apop <- if(!all(is.na(human_nc_u_trunc)) && !all(is.na(animal_pop_trunc)) &&
sum(!is.na(human_nc_u_trunc) & !is.na(animal_pop_trunc)) > 1) {
tryCatch(coef(lm(animal_pop_trunc ~ human_nc_u_trunc))[2], error = function(e) NA)
} else NA
# Assign results to the appropriate row
cor_and_elasticity_extended[i, "cor_pop"] <- cor_pop
cor_and_elasticity_extended[i, "e_pop"] <- e_pop
cor_and_elasticity_extended[i, "WR_cor_u"] <- wr_cor_u
cor_and_elasticity_extended[i, "WR_cor_hpop_au"] <- wr_cor_hpop_au
cor_and_elasticity_extended[i, "WR_cor_hu_apop"] <- wr_cor_hu_apop
cor_and_elasticity_extended[i, "WR_e_u"] <- wr_e_u
cor_and_elasticity_extended[i, "WR_e_hpop_au"] <- wr_e_hpop_au
cor_and_elasticity_extended[i, "WR_e_hu_apop"] <- wr_e_hu_apop
cor_and_elasticity_extended[i, "NC_cor_u"] <- nc_cor_u
cor_and_elasticity_extended[i, "NC_cor_hpop_au"] <- nc_cor_hpop_au
cor_and_elasticity_extended[i, "NC_cor_hu_apop"] <- nc_cor_hu_apop
cor_and_elasticity_extended[i, "NC_e_u"] <- nc_e_u
cor_and_elasticity_extended[i, "NC_e_hpop_au"] <- nc_e_hpop_au
cor_and_elasticity_extended[i, "NC_e_hu_apop"] <- nc_e_hu_apop
}
return(cor_and_elasticity_extended)
}
#Install necessary packages
# install.packages(c("tidyverse", "dplyr", "readr", "ggplot2", "gridExtra",
#                    "png", "mgcv", "tidyselect", "stringr", "readxl",
#                    "openxlsx", "foreign", "broom", "knitr", "data.table", "dlm"))
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm)
# Source the integration script (which sources the other scripts)
source("second_pass/integration.R")
source("second_pass/welfare_analysis_framework.R")
# ==============================================================================
# FLEXIBLE PRESENTATION CONFIGURATION
# ==============================================================================
presentation_config <- list(
create_presentation_images = TRUE,
image_format = "png",
image_width = 12,      # Keep reasonable size
image_height = 8,      # Keep reasonable size
image_dpi = 300,       # Keep high DPI for crisp text
# OPTION 1: Specific files (your current need)
specific_files = list(
"NC_net_tot_trends.pdf" = "A1",
"NC_tot_trends.pdf" = "A2",
"NC_tot_trends_n_wta_wfi.pdf" = "A3",
"NC_net_tot_trends_n_wta_wfi.pdf" = "A4",
"NC_net_utility_comp.pdf" = "B1",
"NC_utility_trends.pdf" = "B2",
"NC_utility_trends_n_wta_wfi.pdf" = "B3",
"NC_utility_trends_n_wta_wfi_with_total.pdf" = "B3.5",
"NC_net_utility_comp_n_wta_wfi.pdf" = "B4",
"NC_net_utility_comp_nw.pdf" = "B5",
"WR_net_utility_comp.pdf" = "C1",
"WR_utility_trends.pdf" = "C2",
"WR_utility_trends_n_wta_wfi.pdf" = "C3",
"WR_utility_trends_n_wta_wfi_with_total.pdf" = "C3.5",
"WR_net_utility_comp_n_wta_wfi.pdf" = "C4",
"WR_net_utility_comp_n_wta_wfi_fbe.pdf" = "C5",
"WR_net_utility_comp_nw.pdf" = "C6",
"WR_utility_trends_n_wta_wfi_fbe.pdf" = "D1",
"WR_utility_trends_n_wta_wfi_fbe_ffi_fch_wtm_hum.pdf" = "D2"
)
# OPTION 2: Pattern-based (for future flexibility)
# filename_patterns = list(
#   list(regex = "^NC_.*utility.*", prefix = "NC_UTIL"),
#   list(regex = "^WR_.*utility.*", prefix = "WR_UTIL"),
#   list(regex = ".*_trends$", prefix = "TREND")
# )
# OPTION 3: Save all plots as presentation images
# save_all = TRUE
)
# ==============================================================================
# NEW GGSAVE OVERRIDE
# ==============================================================================
# Override the default ggsave function globally
if(!is.null(presentation_config) && presentation_config$create_presentation_images) {
# Store original ggsave
original_ggsave <- ggsave
# Create new ggsave function that automatically handles presentation images
ggsave <- function(filename, plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = NA, height = NA, units = c("in", "cm", "mm", "px"),
dpi = 300, limitsize = TRUE, bg = NULL, ...) {
# Call original ggsave first for the PDF
result <- original_ggsave(filename = filename, plot = plot, device = device,
path = path, scale = scale, width = width, height = height,
units = units, dpi = dpi, limitsize = limitsize, bg = bg, ...)
# Extract directory and filename info
if(!is.null(path)) {
output_dir <- path
} else {
output_dir <- dirname(filename)
if(output_dir == ".") output_dir <- getwd()
}
base_filename <- tools::file_path_sans_ext(basename(filename))
pdf_filename <- paste0(base_filename, ".pdf")
# Check if this file should get presentation image treatment
should_save <- FALSE
prefix <- ""
# Method 1: Specific filename mapping
if(!is.null(presentation_config$specific_files) &&
pdf_filename %in% names(presentation_config$specific_files)) {
should_save <- TRUE
prefix <- paste0(presentation_config$specific_files[[pdf_filename]], "_")
}
# Method 2: Pattern matching
if(!is.null(presentation_config$filename_patterns)) {
for(pattern in presentation_config$filename_patterns) {
if(grepl(pattern$regex, base_filename)) {
should_save <- TRUE
if(!is.null(pattern$prefix)) {
prefix <- paste0(pattern$prefix, "_")
}
break
}
}
}
# Method 3: Save all
if(is.null(presentation_config$specific_files) &&
is.null(presentation_config$filename_patterns) &&
isTRUE(presentation_config$save_all)) {
should_save <- TRUE
}
# Create presentation image if needed
if(should_save) {
# Create presentation directory
presentation_dir <- file.path(output_dir, "presentation_images")
if(!dir.exists(presentation_dir)) {
dir.create(presentation_dir, recursive = TRUE)
}
# Save presentation image using ORIGINAL ggsave (no recursion!)
image_ext <- presentation_config$image_format %||% "png"
output_filename <- paste0(prefix, base_filename, ".", image_ext)
output_path <- file.path(presentation_dir, output_filename)
original_ggsave(
filename = output_path,
plot = plot,
width = presentation_config$image_width %||% 12,
height = presentation_config$image_height %||% 8,
dpi = presentation_config$image_dpi %||% 300,
device = image_ext
)
cat("Presentation image saved:", output_filename, "\n")
}
return(result)
}
}
# ==============================================================================
# RUN ANALYSIS
# ==============================================================================
all_results <- run_all_welfare_method_combinations(
human_data_path = "dat/world_bank/world_bank_pop_gdp_clean.xlsx",
farmed_animal_data_path = "first_pass/calc_tseries.xlsx",
wild_animal_data_path = "second_pass/wild_calc_tseries.xlsx",
output_base_dir = "fourth_pass/welfare_results",
create_visualizations = TRUE
)
# Restore original ggsave if needed
if(exists("original_ggsave")) {
ggsave <- original_ggsave
rm(original_ggsave)
}
#Install necessary packages
# install.packages(c("tidyverse", "dplyr", "readr", "ggplot2", "gridExtra",
#                    "png", "mgcv", "tidyselect", "stringr", "readxl",
#                    "openxlsx", "foreign", "broom", "knitr", "data.table", "dlm"))
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm)
# Source the integration script (which sources the other scripts)
source("second_pass/integration.R")
source("second_pass/welfare_analysis_framework.R")
# ==============================================================================
# FLEXIBLE PRESENTATION CONFIGURATION
# ==============================================================================
presentation_config <- list(
create_presentation_images = TRUE,
image_format = "png",
image_width = 12,      # Keep reasonable size
image_height = 8,      # Keep reasonable size
image_dpi = 300,       # Keep high DPI for crisp text
# OPTION 1: Specific files (your current need)
specific_files = list(
"NC_net_tot_trends.pdf" = "A1",
"NC_tot_trends.pdf" = "A2",
"NC_tot_trends_n_wta_wfi.pdf" = "A3",
"NC_net_tot_trends_n_wta_wfi.pdf" = "A4",
"NC_net_utility_comp.pdf" = "B1",
"NC_utility_trends.pdf" = "B2",
"NC_utility_trends_n_wta_wfi.pdf" = "B3",
"NC_utility_trends_n_wta_wfi_with_total.pdf" = "B3.5",
"NC_net_utility_comp_n_wta_wfi.pdf" = "B4",
"NC_net_utility_comp_nw.pdf" = "B5",
"WR_net_utility_comp.pdf" = "C1",
"WR_utility_trends.pdf" = "C2",
"WR_utility_trends_n_wta_wfi.pdf" = "C3",
"WR_utility_trends_n_wta_wfi_with_total.pdf" = "C3.5",
"WR_net_utility_comp_n_wta_wfi.pdf" = "C4",
"WR_net_utility_comp_n_wta_wfi_fbe.pdf" = "C5",
"WR_net_utility_comp_nw.pdf" = "C6",
"WR_utility_trends_n_wta_wfi_fbe.pdf" = "D1",
"WR_utility_trends_n_wta_wfi_fbe_ffi_fch_wtm_hum.pdf" = "D2"
)
# OPTION 2: Pattern-based (for future flexibility)
# filename_patterns = list(
#   list(regex = "^NC_.*utility.*", prefix = "NC_UTIL"),
#   list(regex = "^WR_.*utility.*", prefix = "WR_UTIL"),
#   list(regex = ".*_trends$", prefix = "TREND")
# )
# OPTION 3: Save all plots as presentation images
# save_all = TRUE
)
# ==============================================================================
# NEW GGSAVE OVERRIDE
# ==============================================================================
# Override the default ggsave function globally
if(!is.null(presentation_config) && presentation_config$create_presentation_images) {
# Store original ggsave
original_ggsave <- ggsave
# Create new ggsave function that automatically handles presentation images
ggsave <- function(filename, plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = NA, height = NA, units = c("in", "cm", "mm", "px"),
dpi = 300, limitsize = TRUE, bg = NULL, ...) {
# Call original ggsave first for the PDF
result <- original_ggsave(filename = filename, plot = plot, device = device,
path = path, scale = scale, width = width, height = height,
units = units, dpi = dpi, limitsize = limitsize, bg = bg, ...)
# Extract directory and filename info
if(!is.null(path)) {
output_dir <- path
} else {
output_dir <- dirname(filename)
if(output_dir == ".") output_dir <- getwd()
}
base_filename <- tools::file_path_sans_ext(basename(filename))
pdf_filename <- paste0(base_filename, ".pdf")
# Check if this file should get presentation image treatment
should_save <- FALSE
prefix <- ""
# Method 1: Specific filename mapping
if(!is.null(presentation_config$specific_files) &&
pdf_filename %in% names(presentation_config$specific_files)) {
should_save <- TRUE
prefix <- paste0(presentation_config$specific_files[[pdf_filename]], "_")
}
# Method 2: Pattern matching
if(!is.null(presentation_config$filename_patterns)) {
for(pattern in presentation_config$filename_patterns) {
if(grepl(pattern$regex, base_filename)) {
should_save <- TRUE
if(!is.null(pattern$prefix)) {
prefix <- paste0(pattern$prefix, "_")
}
break
}
}
}
# Method 3: Save all
if(is.null(presentation_config$specific_files) &&
is.null(presentation_config$filename_patterns) &&
isTRUE(presentation_config$save_all)) {
should_save <- TRUE
}
# Create presentation image if needed
if(should_save) {
# Create presentation directory
presentation_dir <- file.path(output_dir, "presentation_images")
if(!dir.exists(presentation_dir)) {
dir.create(presentation_dir, recursive = TRUE)
}
# Save presentation image using ORIGINAL ggsave (no recursion!)
image_ext <- presentation_config$image_format %||% "png"
output_filename <- paste0(prefix, base_filename, ".", image_ext)
output_path <- file.path(presentation_dir, output_filename)
original_ggsave(
filename = output_path,
plot = plot,
width = presentation_config$image_width %||% 12,
height = presentation_config$image_height %||% 8,
dpi = presentation_config$image_dpi %||% 300,
device = image_ext
)
cat("Presentation image saved:", output_filename, "\n")
}
return(result)
}
}
# ==============================================================================
# RUN ANALYSIS
# ==============================================================================
all_results <- run_all_welfare_method_combinations(
human_data_path = "dat/world_bank/world_bank_pop_gdp_clean.xlsx",
farmed_animal_data_path = "first_pass/calc_tseries.xlsx",
wild_animal_data_path = "second_pass/wild_calc_tseries.xlsx",
output_base_dir = "fourth_pass/welfare_results",
create_visualizations = TRUE
)
# Restore original ggsave if needed
if(exists("original_ggsave")) {
ggsave <- original_ggsave
rm(original_ggsave)
}
#Install necessary packages
# install.packages(c("tidyverse", "dplyr", "readr", "ggplot2", "gridExtra",
#                    "png", "mgcv", "tidyselect", "stringr", "readxl",
#                    "openxlsx", "foreign", "broom", "knitr", "data.table", "dlm"))
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm)
# Source the integration script (which sources the other scripts)
source("second_pass/integration.R")
source("second_pass/welfare_analysis_framework.R")
# ==============================================================================
# FLEXIBLE PRESENTATION CONFIGURATION
# ==============================================================================
presentation_config <- list(
create_presentation_images = TRUE,
image_format = "png",
image_width = 12,      # Keep reasonable size
image_height = 8,      # Keep reasonable size
image_dpi = 300,       # Keep high DPI for crisp text
# OPTION 1: Specific files (your current need)
specific_files = list(
"NC_net_tot_trends.pdf" = "A1",
"NC_tot_trends.pdf" = "A2",
"NC_tot_trends_n_wta_wfi.pdf" = "A3",
"NC_net_tot_trends_n_wta_wfi.pdf" = "A4",
"NC_net_utility_comp.pdf" = "B1",
"NC_utility_trends.pdf" = "B2",
"NC_utility_trends_n_wta_wfi.pdf" = "B3",
"NC_utility_trends_n_wta_wfi_with_total.pdf" = "B3.5",
"NC_net_utility_comp_n_wta_wfi.pdf" = "B4",
"NC_net_utility_comp_nw.pdf" = "B5",
"WR_net_utility_comp.pdf" = "C1",
"WR_utility_trends.pdf" = "C2",
"WR_utility_trends_n_wta_wfi.pdf" = "C3",
"WR_utility_trends_n_wta_wfi_with_total.pdf" = "C3.5",
"WR_net_utility_comp_n_wta_wfi.pdf" = "C4",
"WR_net_utility_comp_n_wta_wfi_fbe.pdf" = "C5",
"WR_net_utility_comp_nw.pdf" = "C6",
"WR_utility_trends_n_wta_wfi_fbe.pdf" = "D1",
"WR_utility_trends_n_wta_wfi_fbe_ffi_fch_wtm_hum.pdf" = "D2"
)
# OPTION 2: Pattern-based (for future flexibility)
# filename_patterns = list(
#   list(regex = "^NC_.*utility.*", prefix = "NC_UTIL"),
#   list(regex = "^WR_.*utility.*", prefix = "WR_UTIL"),
#   list(regex = ".*_trends$", prefix = "TREND")
# )
# OPTION 3: Save all plots as presentation images
# save_all = TRUE
)
# ==============================================================================
# NEW GGSAVE OVERRIDE
# ==============================================================================
# Override the default ggsave function globally
if(!is.null(presentation_config) && presentation_config$create_presentation_images) {
# Store original ggsave
original_ggsave <- ggsave
# Create new ggsave function that automatically handles presentation images
ggsave <- function(filename, plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = NA, height = NA, units = c("in", "cm", "mm", "px"),
dpi = 300, limitsize = TRUE, bg = NULL, ...) {
# Call original ggsave first for the PDF
result <- original_ggsave(filename = filename, plot = plot, device = device,
path = path, scale = scale, width = width, height = height,
units = units, dpi = dpi, limitsize = limitsize, bg = bg, ...)
# Extract directory and filename info
if(!is.null(path)) {
output_dir <- path
} else {
output_dir <- dirname(filename)
if(output_dir == ".") output_dir <- getwd()
}
base_filename <- tools::file_path_sans_ext(basename(filename))
pdf_filename <- paste0(base_filename, ".pdf")
# Check if this file should get presentation image treatment
should_save <- FALSE
prefix <- ""
# Method 1: Specific filename mapping
if(!is.null(presentation_config$specific_files) &&
pdf_filename %in% names(presentation_config$specific_files)) {
should_save <- TRUE
prefix <- paste0(presentation_config$specific_files[[pdf_filename]], "_")
}
# Method 2: Pattern matching
if(!is.null(presentation_config$filename_patterns)) {
for(pattern in presentation_config$filename_patterns) {
if(grepl(pattern$regex, base_filename)) {
should_save <- TRUE
if(!is.null(pattern$prefix)) {
prefix <- paste0(pattern$prefix, "_")
}
break
}
}
}
# Method 3: Save all
if(is.null(presentation_config$specific_files) &&
is.null(presentation_config$filename_patterns) &&
isTRUE(presentation_config$save_all)) {
should_save <- TRUE
}
# Create presentation image if needed
if(should_save) {
# Create presentation directory
presentation_dir <- file.path(output_dir, "presentation_images")
if(!dir.exists(presentation_dir)) {
dir.create(presentation_dir, recursive = TRUE)
}
# Save presentation image using ORIGINAL ggsave (no recursion!)
image_ext <- presentation_config$image_format %||% "png"
output_filename <- paste0(prefix, base_filename, ".", image_ext)
output_path <- file.path(presentation_dir, output_filename)
original_ggsave(
filename = output_path,
plot = plot,
width = presentation_config$image_width %||% 12,
height = presentation_config$image_height %||% 8,
dpi = presentation_config$image_dpi %||% 300,
device = image_ext
)
cat("Presentation image saved:", output_filename, "\n")
}
return(result)
}
}
# ==============================================================================
# RUN ANALYSIS
# ==============================================================================
all_results <- run_all_welfare_method_combinations(
human_data_path = "dat/world_bank/world_bank_pop_gdp_clean.xlsx",
farmed_animal_data_path = "first_pass/calc_tseries.xlsx",
wild_animal_data_path = "second_pass/wild_calc_tseries.xlsx",
output_base_dir = "fourth_pass/welfare_results",
create_visualizations = TRUE
)
# Restore original ggsave if needed
if(exists("original_ggsave")) {
ggsave <- original_ggsave
rm(original_ggsave)
}
getwd()
library(ape)
install.packages("ape")
library(ape)
tree <- read.nexus("fourth_pass/phylo/output.nex")
View(tree)
cophenetic(tree[[1]])
dist.nodes(tree[[1]])
dist.nodes(tree[[1]])$tip.label
tree[[1]].label
tree[[1]]$tip.label
