# )
# OPTION 3: Save all plots as presentation images
# save_all = TRUE
)
# ==============================================================================
# GGSAVE OVERRIDE
# ==============================================================================
# Override the default ggsave function globally
if(!is.null(presentation_config) && presentation_config$create_presentation_images) {
# Create new ggsave function that automatically handles presentation images
ggsave <- function(filename, plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = NA, height = NA, units = c("in", "cm", "mm", "px"),
dpi = 300, limitsize = TRUE, bg = NULL, ...) {
# Call the ORIGINAL ggplot2 ggsave using namespace qualification to avoid recursion
result <- ggplot2:::ggsave(filename = filename, plot = plot, device = device,
path = path, scale = scale, width = width, height = height,
units = units, dpi = dpi, limitsize = limitsize, bg = bg, ...)
# Extract directory and filename info
if(!is.null(path)) {
output_dir <- path
} else {
output_dir <- dirname(filename)
if(output_dir == ".") output_dir <- getwd()
}
base_filename <- tools::file_path_sans_ext(basename(filename))
pdf_filename <- paste0(base_filename, ".pdf")
# Check if this file should get presentation image treatment
should_save <- FALSE
prefix <- ""
# Method 1: Specific filename mapping
if(!is.null(presentation_config$specific_files) &&
pdf_filename %in% names(presentation_config$specific_files)) {
should_save <- TRUE
prefix <- paste0(presentation_config$specific_files[[pdf_filename]], "_")
}
# Method 2: Pattern matching
if(!is.null(presentation_config$filename_patterns)) {
for(pattern in presentation_config$filename_patterns) {
if(grepl(pattern$regex, base_filename)) {
should_save <- TRUE
if(!is.null(pattern$prefix)) {
prefix <- paste0(pattern$prefix, "_")
}
break
}
}
}
# Method 3: Save all
if(is.null(presentation_config$specific_files) &&
is.null(presentation_config$filename_patterns) &&
isTRUE(presentation_config$save_all)) {
should_save <- TRUE
}
# Create presentation image if needed
if(should_save) {
# Create presentation directory
presentation_dir <- file.path(output_dir, "presentation_images")
if(!dir.exists(presentation_dir)) {
dir.create(presentation_dir, recursive = TRUE)
}
# Save presentation image using the ORIGINAL ggplot2 ggsave (no recursion!)
image_ext <- presentation_config$image_format %||% "png"
output_filename <- paste0(prefix, base_filename, ".", image_ext)
output_path <- file.path(presentation_dir, output_filename)
ggplot2:::ggsave(
filename = output_path,
plot = plot,
width = presentation_config$image_width %||% 12,
height = presentation_config$image_height %||% 8,
dpi = presentation_config$image_dpi %||% 300,
device = image_ext
)
cat("Presentation image saved:", output_filename, "\n")
}
return(result)
}
}
# ==============================================================================
# RUN ANALYSIS
# ==============================================================================
all_results <- run_all_welfare_method_combinations(
human_data_path = "dat/world_bank/world_bank_pop_gdp_clean.xlsx",
farmed_animal_data_path = "fifth_pass/calc_tseries.xlsx",
wild_animal_data_path = "fifth_pass/wild_calc_tseries.xlsx",
output_base_dir = "fifth_pass/welfare_results",
create_visualizations = TRUE
)
# Create combined visualisations
combine_utility_visualizations(output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations")
# Create combined visualisations
combine_utility_visualizations(output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations")
# Modular Welfare Analysis Framework
# This script provides a flexible framework for analyzing welfare data
# with different quantification methods for both welfare levels and potentials
# Create combined visualisations
combine_utility_visualizations(output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations")
# Create combined visualisations
combine_utility_visualizations(output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations")
#' Create an six-panel figure combining population tables and plots
#'
#' @param output_dir Base directory where visualizations are stored
#' @param save_dir Directory to save the combined six-panel figure (default: "six_figure_displays")
#' @return NULL (saves combined plot to file)
create_six_panel_population_display <- function(output_dir = "visualizations",
save_dir = "six_figure_displays") {
# Create output directory if it doesn't exist
if(!dir.exists(save_dir)) {
dir.create(save_dir, recursive = TRUE)
}
cat("Creating six-panel population display combining tables and plots...\n")
# Define file paths for the images and PDFs
table_dir <- file.path(output_dir, "tables")
viz_dir <- output_dir
# Define all the files we need
required_files <- list(
# PNG Treemap
pop_treemap = file.path(table_dir, "population_treemap_2023_n_wta_wfi_fbe.png"),
# PDF plots (we'll convert these to images)
human_pop = load(paste0(viz_dir, "/population_humans_only.rdata")),
farmed_stacked = load(paste0(viz_dir, "/population_farmed_stacked_n_wta_wfi_fbe.rdata")),
farmed_n_wta_wfi_fbe_ffi_fch = load(paste0(viz_dir, "/population_farmed_stacked_n_wta_wfi_fbe_ffi_fch.rdata")),
wild_stacked = load(paste0(viz_dir, "/population_wild_stacked_n_wta_wfi.rdata")),
relative_comparison = load(paste0(viz_dir, "/population_comparison_relative_n_wta_wfi_fbe.rdata"))
)
# Check that all required files exist
missing_files <- required_files[!file.exists(unlist(required_files))]
if(length(missing_files) > 0) {
stop("Missing required files: ", paste(names(missing_files), collapse = ", "),
"\nExpected paths: ", paste(unlist(missing_files), collapse = ", "))
}
# Function to read PNG as ggplot grob
png_to_grob <- function(png_path) {
img <- png::readPNG(png_path)
g <- grid::rasterGrob(img, interpolate = TRUE)
return(ggplot() +
annotation_custom(g, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void())
}
# Function to convert PDF to temporary PNG and read as grob
pdf_to_grob <- function(pdf_path, width = 800, height = 600, res = 150) {
# Create temporary PNG file
temp_png <- tempfile(fileext = ".png")
# Convert PDF to PNG using pdf() and dev.copy()
# Alternative approach using system call to convert (if available)
tryCatch({
# Try using magick package if available
if(require(magick, quietly = TRUE)) {
img <- magick::image_read_pdf(pdf_path, density = res)
magick::image_write(img, temp_png, format = "png")
} else {
# Fallback: use base R to recreate the plot
# This is a limitation - we can't directly convert existing PDFs
# Instead, we'll create a placeholder
warning("Cannot convert PDF to PNG without magick package. Creating placeholder for: ", basename(pdf_path))
png(temp_png, width = width, height = height, res = res)
plot(1, type = "n", xlab = "", ylab = "",
main = paste("Plot:", basename(pdf_path)), axes = FALSE)
text(1, 1, basename(pdf_path), cex = 1.5)
dev.off()
}
# Read the PNG and create grob
img <- png::readPNG(temp_png)
g <- grid::rasterGrob(img, interpolate = TRUE)
# Clean up temp file
unlink(temp_png)
return(ggplot() +
annotation_custom(g, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void())
}, error = function(e) {
# If all else fails, create a text placeholder
return(ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = paste("Error loading:", basename(pdf_path)),
size = 4) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA)))
})
}
cat("Loading PNG tables...\n")
# Load PNG tables
g3 <- png_to_grob(required_files$pop_treemap)
cat("Converting PDF plots...\n")
# Load and convert PDF plots
g4 <- pdf_to_grob(required_files$human_pop)
g5 <- pdf_to_grob(required_files$farmed_stacked)
g6 <- pdf_to_grob(required_files$farmed_n_wta_wfi_fbe_ffi_fch)
g7 <- pdf_to_grob(required_files$wild_stacked)
g8 <- pdf_to_grob(required_files$relative_comparison)
# Add titles to each panel
g3 <- g3 + ggtitle("C. Population Treemap (2023)")
g4 <- g4 + ggtitle("D. Human Population Trends")
g5 <- g5 + ggtitle("E. Farmed Animals (All)")
g6 <- g6 + ggtitle("F. Farmed Animals (No Fish/Chickens)")
g7 <- g7 + ggtitle("G. Wild Animals")
g8 <- g8 + ggtitle("H. Relative Population Trends")
cat("Arranging panels...\n")
# Arrange in a 3x3 grid with the last position empty, or 4x2
# Let's do 4 rows x 2 columns for better layout
combined_plot <-
(g3 | g4) /
(g5 | g6) /
(g7 | g8) +
plot_annotation(
title = "Comprehensive Population Analysis: Tables, Treemaps, and Temporal Trends",
subtitle = "A multi-faceted view of population dynamics across humans, farmed animals, and wildlife",
caption = "Note: Excludes wild terrestrial arthropods, wild fish, and farmed bees for clarity",
theme = theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5)
)
)
# Save the combined figure
output_file <- file.path(save_dir, "six_panel_population_comprehensive.pdf")
cat("Saving combined figure...\n")
ggsave(output_file,
plot = combined_plot,
width = 20,
height = 24,
units = "in",
dpi = 300)
# Also save as PNG for easier viewing
output_png <- file.path(save_dir, "six_panel_population_comprehensive.png")
ggsave(output_png,
plot = combined_plot,
width = 20,
height = 24,
units = "in",
dpi = 300)
cat("Eight-panel population display saved to:\n")
cat("  PDF:", output_file, "\n")
cat("  PNG:", output_png, "\n")
return(combined_plot)
}
#' Create an six-panel figure combining population tables and plots
#'
#' @param output_dir Base directory where visualizations are stored
#' @param save_dir Directory to save the combined six-panel figure (default: "six_figure_displays")
#' @return NULL (saves combined plot to file)
create_six_panel_population_display <- function(output_dir = "visualizations",
save_dir = "six_figure_displays") {
# Create output directory if it doesn't exist
if(!dir.exists(save_dir)) {
dir.create(save_dir, recursive = TRUE)
}
cat("Creating six-panel population display combining tables and plots...\n")
# Define file paths for the images and PDFs
table_dir <- file.path(output_dir, "tables")
viz_dir <- output_dir
# Define all the files we need
required_files <- list(
# PNG Treemap
pop_treemap = file.path(table_dir, "population_treemap_2023_n_wta_wfi_fbe.png"),
# PDF plots (we'll convert these to images)
human_pop = load(paste0(viz_dir, "/population_humans_only.rdata")),
farmed_stacked = load(paste0(viz_dir, "/population_farmed_stacked_n_wta_wfi_fbe.rdata")),
farmed_n_wta_wfi_fbe_ffi_fch = load(paste0(viz_dir, "/population_farmed_stacked_n_wta_wfi_fbe_ffi_fch.rdata")),
wild_stacked = load(paste0(viz_dir, "/population_wild_stacked_n_wta_wfi.rdata")),
relative_comparison = load(paste0(viz_dir, "/population_comparison_relative_n_wta_wfi_fbe.rdata"))
)
# Check that all required files exist
missing_files <- required_files[!file.exists(unlist(required_files))]
if(length(missing_files) > 0) {
stop("Missing required files: ", paste(names(missing_files), collapse = ", "),
"\nExpected paths: ", paste(unlist(missing_files), collapse = ", "))
}
# Function to read PNG as ggplot grob
png_to_grob <- function(png_path) {
img <- png::readPNG(png_path)
g <- grid::rasterGrob(img, interpolate = TRUE)
return(ggplot() +
annotation_custom(g, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void())
}
# Function to convert PDF to temporary PNG and read as grob
pdf_to_grob <- function(pdf_path, width = 800, height = 600, res = 150) {
# Create temporary PNG file
temp_png <- tempfile(fileext = ".png")
# Convert PDF to PNG using pdf() and dev.copy()
# Alternative approach using system call to convert (if available)
tryCatch({
# Try using magick package if available
if(require(magick, quietly = TRUE)) {
img <- magick::image_read_pdf(pdf_path, density = res)
magick::image_write(img, temp_png, format = "png")
} else {
# Fallback: use base R to recreate the plot
# This is a limitation - we can't directly convert existing PDFs
# Instead, we'll create a placeholder
warning("Cannot convert PDF to PNG without magick package. Creating placeholder for: ", basename(pdf_path))
png(temp_png, width = width, height = height, res = res)
plot(1, type = "n", xlab = "", ylab = "",
main = paste("Plot:", basename(pdf_path)), axes = FALSE)
text(1, 1, basename(pdf_path), cex = 1.5)
dev.off()
}
# Read the PNG and create grob
img <- png::readPNG(temp_png)
g <- grid::rasterGrob(img, interpolate = TRUE)
# Clean up temp file
unlink(temp_png)
return(ggplot() +
annotation_custom(g, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void())
}, error = function(e) {
# If all else fails, create a text placeholder
return(ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = paste("Error loading:", basename(pdf_path)),
size = 4) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA)))
})
}
cat("Loading PNG tables...\n")
# Load PNG tables
g3 <- png_to_grob(required_files$pop_treemap)
cat("Converting PDF plots...\n")
# Load and convert PDF plots
g4 <- pdf_to_grob(required_files$human_pop)
g5 <- pdf_to_grob(required_files$farmed_stacked)
g6 <- pdf_to_grob(required_files$farmed_n_wta_wfi_fbe_ffi_fch)
g7 <- pdf_to_grob(required_files$wild_stacked)
g8 <- pdf_to_grob(required_files$relative_comparison)
# Add titles to each panel
g3 <- g3 + ggtitle("C. Population Treemap (2023)")
g4 <- g4 + ggtitle("D. Human Population Trends")
g5 <- g5 + ggtitle("E. Farmed Animals (All)")
g6 <- g6 + ggtitle("F. Farmed Animals (No Fish/Chickens)")
g7 <- g7 + ggtitle("G. Wild Animals")
g8 <- g8 + ggtitle("H. Relative Population Trends")
cat("Arranging panels...\n")
# Arrange in a 3x3 grid with the last position empty, or 4x2
# Let's do 4 rows x 2 columns for better layout
combined_plot <-
(g3 | g4) /
(g5 | g6) /
(g7 | g8) +
plot_annotation(
title = "Comprehensive Population Analysis: Tables, Treemaps, and Temporal Trends",
subtitle = "A multi-faceted view of population dynamics across humans, farmed animals, and wildlife",
caption = "Note: Excludes wild terrestrial arthropods, wild fish, and farmed bees for clarity",
theme = theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5)
)
)
# Save the combined figure
output_file <- file.path(save_dir, "six_panel_population_comprehensive.pdf")
cat("Saving combined figure...\n")
ggsave(output_file,
plot = combined_plot,
width = 20,
height = 24,
units = "in",
dpi = 300)
# Also save as PNG for easier viewing
output_png <- file.path(save_dir, "six_panel_population_comprehensive.png")
ggsave(output_png,
plot = combined_plot,
width = 20,
height = 24,
units = "in",
dpi = 300)
cat("Eight-panel population display saved to:\n")
cat("  PDF:", output_file, "\n")
cat("  PNG:", output_png, "\n")
return(combined_plot)
}
output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations"
save_dir = "fifth_pass/welfare_results/six_figure_displays"
create_six_panel_population_display(output_dir = output_dir,
save_dir = "fifth_pass/welfare_results/six_figure_displays")
cat("Creating six-panel population display combining tables and plots...\n")
# Define file paths for the images and PDFs
table_dir <- file.path(output_dir, "tables")
viz_dir <- output_dir
cat("Creating six-panel population display combining tables and plots...\n")
# Define file paths for the images and PDFs
table_dir <- file.path(output_dir, "tables")
viz_dir <- output_dir
table_dir
required_files <- list(
# PNG Treemap
pop_treemap = file.path(table_dir, "population_treemap_2023_n_wta_wfi_fbe.png"),
# PDF plots (we'll convert these to images)
human_pop = load(paste0(viz_dir, "/population_humans_only.rdata")),
farmed_stacked = load(paste0(viz_dir, "/population_farmed_stacked_n_wta_wfi_fbe.rdata")),
farmed_n_wta_wfi_fbe_ffi_fch = load(paste0(viz_dir, "/population_farmed_stacked_n_wta_wfi_fbe_ffi_fch.rdata")),
wild_stacked = load(paste0(viz_dir, "/population_wild_stacked_n_wta_wfi.rdata")),
relative_comparison = load(paste0(viz_dir, "/population_comparison_relative_n_wta_wfi_fbe.rdata"))
)
human_pop
# Define all the files we need
required_files <- list(
# PNG Treemap
pop_treemap = file.path(table_dir, "population_treemap_2023_n_wta_wfi_fbe.png"),
# PDF plots (we'll convert these to images)
p1 = load(paste0(viz_dir, "/population_humans_only.rdata")),
p2 = load(paste0(viz_dir, "/population_farmed_stacked_n_wta_wfi_fbe.rdata")),
p2b = load(paste0(viz_dir, "/population_farmed_stacked_n_wta_wfi_fbe_ffi_fch.rdata")),
p3 = load(paste0(viz_dir, "/population_wild_stacked_n_wta_wfi.rdata")),
p4 = load(paste0(viz_dir, "/population_comparison_relative_n_wta_wfi_fbe.rdata"))
)
# Check that all required files exist
missing_files <- required_files[!file.exists(unlist(required_files))]
if(length(missing_files) > 0) {
stop("Missing required files: ", paste(names(missing_files), collapse = ", "),
"\nExpected paths: ", paste(unlist(missing_files), collapse = ", "))
}
View(p1)
p1
# Function to read PNG as ggplot grob
png_to_grob <- function(png_path) {
img <- png::readPNG(png_path)
g <- grid::rasterGrob(img, interpolate = TRUE)
return(ggplot() +
annotation_custom(g, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void())
}
cat("Loading PNG tables...\n")
# Load PNG tables
g3 <- png_to_grob(required_files$pop_treemap)
# Add titles to each panel
g3 <- g3 + ggtitle("C. Population Treemap (2023)")
p1 <- p1 + ggtitle("D. Human Population Trends")
p2 <- p2 + ggtitle("E. Farmed Animals (All)")
p2b <- p2b + ggtitle("F. Farmed Animals (No Fish/Chickens)")
p3 <- p3 + ggtitle("G. Wild Animals")
p4 <- p4 + ggtitle("H. Relative Population Trends")
p1
# Restore original ggsave if needed
if(exists("original_ggsave")) {
ggsave <- original_ggsave
rm(original_ggsave)
}
# Create combined visualisations
combine_utility_visualizations(output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations")
source("fifth_pass/create_utility_visualizations.R")
source("fifth_pass/create_utility_visualizations.R")
# Create combined visualisations
combine_utility_visualizations(output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations")
# Create combined visualisations
combine_utility_visualizations(output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations")
#' Create complete set of utility visualizations using factored functions
#'
#' @param data The processed dataset
#' @param net_series The net series data (not used in current implementation)
#' @param output_dir Directory for saving visualizations
#' @return NULL (saves plots to files)
create_utility_visualizations <- function(data,
net_series,
output_dir = "visualizations") {
# Create directory if it doesn't exist
if(!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
cat("Creating utility visualizations...\n")
#0. Create NC apot (aliveatanytime * NC_potential) plots
create_nc_apot_plots(data, output_dir)
# 1. Create NC utility plots
create_nc_utility_plots(data, output_dir)
# 2. Create WR utility plots
create_wr_utility_plots(data, output_dir)
# 3. Prepare data for net series
extended_data_for_net <- prepare_data_for_net_series(data, output_dir)
# 4a. Create tables
create_population_tables_n_wta_wfi_fbe(extended_data_for_net, output_dir)
create_population_tables(extended_data_for_net, output_dir)
# 5a. Create four-panel population plot
create_four_panel_population_plots_n(extended_data_for_net, output_dir)
create_four_panel_population_plots(extended_data_for_net, output_dir)
#5b. Create four-panel NC_tot plot
create_four_panel_nc_tot_plots(extended_data_for_net, output_dir)
#5c. Create four-panel NC_apot plot [doesn't need to be shown except in appendix]
create_four_panel_nc_apot_plots(extended_data_for_net, output_dir)
#5d. Create four-panel NC score range
p4_from_four_panel_NC_score_range <-
create_four_panel_nc_score_range_plots(extended_data_for_net, output_dir)
#7a. Create three-panel NC functional form changes
create_three_panel_nc_func_form_check(extended_data_for_net, output_dir, p4_from_four_panel_NC_score_range)
#7b. Create four-panel WR score range
create_four_panel_wr_score_range_plots(extended_data_for_net, output_dir)
#6c. Something to do with different measures for human welare
#Commenting out due to not needed for fifth pass
# 8. Create NC net utility comparisons
create_nc_net_utility_comparisons(extended_data_for_net, output_dir)
# 9. Create WR net utility comparisons
create_wr_net_utility_comparisons(extended_data_for_net, output_dir)
# 10. Create NC net total series
create_nc_net_tot_series(extended_data_for_net, output_dir)
# 11. Create disaggregated plots with totals
create_disaggregated_plots_with_totals(data, output_dir)
cat("All utility visualizations completed successfully!\n")
}
#' Create utility visualizations from figures that have already been made
#'
#' @param output_dir Directory for saving visualizations
#' @return NULL (saves plots to files)
combine_utility_visualizations <- function(output_dir = "visualizations") {
source("fifth_pass/welfare_analysis_framework.R")
# 1a. Create eight-panel population display
create_six_panel_population_display(output_dir = output_dir,
save_dir = "fifth_pass/welfare_results/six_figure_displays")
}
# Create combined visualisations
source("fifth_pass/create_utility_visualizations.R")
combine_utility_visualizations(output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations")
# Create combined visualisations
source("fifth_pass/create_utility_visualizations.R")
combine_utility_visualizations(output_dir = "fifth_pass/welfare_results/3282/analysis_results/visualizations")
