filename = output_path,
plot = plot,
width = presentation_config$image_width %||% 12,
height = presentation_config$image_height %||% 8,
dpi = presentation_config$image_dpi %||% 300,
device = image_ext
)
cat("Presentation image saved:", output_filename, "\n")
}
return(result)
}
}
# ==============================================================================
# RUN ANALYSIS
# ==============================================================================
all_results <- run_all_welfare_method_combinations(
human_data_path = "dat/world_bank/world_bank_pop_gdp_clean.xlsx",
farmed_animal_data_path = "first_pass/calc_tseries.xlsx",
wild_animal_data_path = "second_pass/wild_calc_tseries.xlsx",
output_base_dir = "fourth_pass/welfare_results",
create_visualizations = TRUE
)
# Restore original ggsave if needed
if(exists("original_ggsave")) {
ggsave <- original_ggsave
rm(original_ggsave)
}
# ==============================================================================
# FINDING MY HEAD
# ==============================================================================
# human_dat = read_xlsx("dat/world_bank/world_bank_pop_gdp_clean.xlsx")
# farmed_dat = read_xlsx("first_pass/calc_tseries.xlsx")
# wild_dat = read_xlsx("second_pass/wild_calc_tseries.xlsx")
# integrated_dat = read_xlsx("fourth_pass/welfare_results/3282/integrated_calc_tseries.xlsx")
# Complete Welfare Analysis Integration
# This script integrates the human welfare calculation with animal welfare analysis
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm)
# Source required functions
source("second_pass/welfare_analysis_framework.R")  # Main analysis functions
source("second_pass/human_welfare_module.R")  # Human welfare calculations
source("second_pass/wild_animal_module.R")  # Wild animal welfare calculations
#' Run the complete welfare analysis pipeline
#'
#' @param human_data_path Path to the World Bank human data
#' @param farmed_animal_data_path Path to the raw animal data
#' @param wild_animal_data_path Path to the raw wild animal data
#' @param welfare_level_method Method for welfare level calculation ("isoelastic" or "3282")
#' @param welfare_potential_method Method for welfare potential calculation (set to "ALL" for both NC and WR)
#' @param output_base_dir Base directory for outputs
#' @param create_visualizations Whether to create visualizations
#' @param skip_population_plots Whether to skip population trend visualizations
#' @return List of results from the analysis
run_complete_welfare_analysis <- function(human_data_path,
farmed_animal_data_path,
wild_animal_data_path,
welfare_level_method = "isoelastic",
welfare_potential_method = "ALL",
output_base_dir,  # No default - always passed from caller
create_visualizations = TRUE) {
# Create method-specific output directory
# Modified to just use welfare_level_method since both NC and WR are calculated
output_dir <- file.path(output_base_dir, welfare_level_method)
if(!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Step 1: Calculate human welfare
cat("Step 1: Calculating human welfare levels using", welfare_level_method, "method...\n")
human_welfare_dir <- file.path(output_dir, "human_welfare")
human_welfare_results <- calculate_human_welfare_levels(
data_path = human_data_path,
method = welfare_level_method,
output_dir = human_welfare_dir,
visualize = create_visualizations
)
# Step 2: Prepare human welfare data for integration
cat("Step 2: Preparing human welfare data for integration...\n")
human_data_formatted <- prepare_human_data_for_integration(
human_welfare_results,
output_file = file.path(output_dir, "human_data_formatted.xlsx")
)
# Note that wild animal data is already ready for integration
# Step 3: Read and preprocess animal data
cat("Step 3: Reading and preprocessing animal data...\n")
farmed_animal_data <- read_excel(farmed_animal_data_path)
wild_animal_data <- read_excel(wild_animal_data_path)
# Step 4: Integrate human and animal data
cat("Step 4: Integrating human and animal data...\n")
# Extract needed columns from animal data
# This assumes animal data has at least these columns: Year, Category, Group, aliveatanytime
required_cols <- c("Year", "Category", "Group", "aliveatanytime")
animal_cols <- names(farmed_animal_data)
# Check if all required columns exist
if(!all(required_cols %in% animal_cols)) {
missing_cols <- setdiff(required_cols, animal_cols)
stop("Missing required columns in animal data: ", paste(missing_cols, collapse = ", "))
}
# Integrate farmed animal data with human data
if("Humans" %in% farmed_animal_data$Group) {
# If humans already in the dataset, replace with new welfare data
integrated_hf_data <- farmed_animal_data %>%
filter(Group != "Humans") %>%
bind_rows(human_data_formatted)
} else {
# If no humans in the dataset, simply append
integrated_hf_data <- bind_rows(farmed_animal_data, human_data_formatted)
}
# Integrate farmed animal and human data with wild animal data
integrated_data <- integrate_wild_animal_data(wild_data = wild_animal_data,
calc_tseries = integrated_hf_data,
output_file = file.path(output_dir, "integrated_calc_tseries.xlsx"))
# Step 5: Ensure dataset has required potential and utility columns
cat("Step 5: Calculating welfare potential and utility metrics...\n")
# Ensure we have all necessary columns for both methods - always ensure both
# sets of columns exist to avoid missing column errors in analysis
integrated_data <- ensure_nc_columns(integrated_data)
integrated_data <- ensure_wr_columns(integrated_data)
# Save integrated data - with fixed path
integrated_data_path <- file.path(output_dir, "integrated_calc_tseries.xlsx")
write.xlsx(integrated_data, integrated_data_path)
# Step 6: Run analysis on integrated data
cat("Step 6: Running welfare analysis on integrated data...\n")
analysis_results <- analyze_welfare_data(
data_path = integrated_data_path,
welfare_level_method = welfare_level_method,
output_dir = file.path(output_dir, "analysis_results"),
create_visualizations = create_visualizations
)
cat("\nComplete welfare analysis pipeline completed successfully!\n")
return(list(
human_welfare = human_welfare_results,
integrated_data = integrated_data,
analysis_results = analysis_results
))
}
#' Run all method combinations in a single function
#'
#' @param human_data_path Path to the World Bank human data
#' @param farmed_animal_data_path Path to the raw farmed animal data
#' @param wild_animal_data_path Path to the raw wild animal data
#' @param output_base_dir Base directory for outputs
#' @param create_visualizations Whether to create visualizations
#' @return List of results from all analyses
run_all_welfare_method_combinations <- function(human_data_path,
farmed_animal_data_path,
wild_animal_data_path,
output_base_dir,
create_visualizations = TRUE) {
# Run the analyses for each welfare level method first to get integrated data
welfare_level_methods <- c("isoelastic", "3282")
results_list <- list()
for(wl_method in welfare_level_methods) {
cat("\n\n========================================================\n")
cat(paste0("Running analysis with welfare level method '", wl_method, "'...\n"))
cat("========================================================\n\n")
# Run complete analysis with this method
results <- run_complete_welfare_analysis(
human_data_path = human_data_path,
farmed_animal_data_path = farmed_animal_data_path,
wild_animal_data_path = wild_animal_data_path,
welfare_level_method = wl_method,
welfare_potential_method = "ALL",
output_base_dir = output_base_dir,
create_visualizations = create_visualizations
)
# Store results
results_list[[wl_method]] <- results
cat(paste0("\nAnalysis complete for '", wl_method, "'.\n"))
}
# After analysis, create top-level population trend visualizations
# using the integrated data from the first result (both methods have same integrated data)
cat("Creating top-level population trend visualizations...\n")
# Get integrated data from first analysis
integrated_data <- results_list[[welfare_level_methods[1]]]$integrated_data
# Create population trends directory
pop_trends_dir <- file.path(output_base_dir, "population_trends")
if(!dir.exists(pop_trends_dir)) {
dir.create(pop_trends_dir, recursive = TRUE)
}
# Filter out rows with NA values for population
filtered_data <- integrated_data %>%
filter(!is.na(aliveatanytime))
# Plot 1: All population trends
p1 <- ggplot(filtered_data, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time",
y = "Population (alive at any time)",
x = "Year") +
theme_minimal()
ggsave(file.path(pop_trends_dir, "population_trends.pdf"),
plot = p1, width = 10, height = 6)
# No wild terrestrial arthropods
filtered_n_wta <- filtered_data %>%
filter(Category != "Wild terrestrial arthropods")
p_n_wta <- ggplot(filtered_n_wta, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time (no wt. arthropods)",
y = "Population (alive at any time)",
x = "Year") +
theme_minimal()
ggsave(file.path(pop_trends_dir, "population_trends_n_wta.pdf"),
plot = p_n_wta, width = 10, height = 6)
# No wild terrestrial arthropods, no wild fish
filtered_n_wta_wfi <- filtered_n_wta %>%
filter(Category != "Wild fish")
p_n_wta_wfi <- ggplot(filtered_n_wta_wfi, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time (no wt. arthropods, no w. fish)",
y = "Population (alive at any time)",
x = "Year") +
theme_minimal()
ggsave(file.path(pop_trends_dir, "population_trends_n_wta_wfi.pdf"),
plot = p_n_wta_wfi, width = 10, height = 6)
# No wild terrestrial arthropods, no wild fish, no bees
filtered_n_wta_wfi_fbe <- filtered_n_wta_wfi %>%
filter(Category != "Bees")
p_n_wta_wfi_fbe <- ggplot(filtered_n_wta_wfi_fbe, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time (no wt. arthropods, no w. fish, no bees)",
y = "Population (alive at any time)",
x = "Year") +
theme_minimal()
ggsave(file.path(pop_trends_dir, "population_trends_n_wta_wfi_fbe.pdf"),
plot = p_n_wta_wfi_fbe, width = 10, height = 6)
# No wild terrestrial arthropods, no wild fish, no bees, no farmed fish
filtered_n_wta_wfi_fbe_ffi <- filtered_n_wta_wfi_fbe %>%
filter(Category != "Fish")
p_n_wta_wfi_fbe_ffi <- ggplot(filtered_n_wta_wfi_fbe_ffi, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time (no wt. arthropods, no w. fish, no bees, no f. fish)",
y = "Population (alive at any time)",
x = "Year") +
theme_minimal()
ggsave(file.path(pop_trends_dir, "population_trends_n_wta_wfi_fbe_ffi.pdf"),
plot = p_n_wta_wfi_fbe_ffi, width = 10, height = 6)
# No wt. arthropods, no w. fish, no bees, no f. fish, no wild terrestrial mammals
filtered_n_wta_wfi_fbe_ffi_wtm <- filtered_n_wta_wfi_fbe_ffi %>%
filter(Category != "Wild terrestrial mammals")
p_n_wta_wfi_fbe_ffi_wtm <- ggplot(filtered_n_wta_wfi_fbe_ffi_wtm, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time (no wt. arthropods, no w. fish, no bees, no f. fish, no wt. mammals)",
y = "Population (alive at any time)",
x = "Year") +
theme_minimal()
ggsave(file.path(pop_trends_dir, "population_trends_n_wta_wfi_fbe_ffi_wtm.pdf"),
plot = p_n_wta_wfi_fbe_ffi_wtm, width = 10, height = 6)
# No wt. arthropods, no w. fish, no bees, no f. fish, no wt. mammals, no wild birds
filtered_n_wta_wfi_fbe_ffi_wtm_wbi <- filtered_n_wta_wfi_fbe_ffi_wtm %>%
filter(Category != "Wild birds")
p_n_wta_wfi_fbe_ffi_wtm_wbi <- ggplot(filtered_n_wta_wfi_fbe_ffi_wtm_wbi, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time (no wt. arthropods, no w. fish, no bees, no f. fish, no wt. mammals, no w. birds)",
y = "Population (alive at any time)",
x = "Year") +
theme_minimal()
ggsave(file.path(pop_trends_dir, "population_trends_n_wta_wfi_fbe_ffi_wtm_wbi.pdf"),
plot = p_n_wta_wfi_fbe_ffi_wtm_wbi, width = 10, height = 6)
# No wt. arthropods, no w. fish, no bees, no f. fish, no wt. mammals, no w. birds, no chickens
filtered_n_wta_wfi_fbe_ffi_wtm_wbi_fch <- filtered_n_wta_wfi_fbe_ffi_wtm_wbi %>%
filter(Category != "Chickens")
p_n_wta_wfi_fbe_ffi_wtm_wbi_fch <- ggplot(filtered_n_wta_wfi_fbe_ffi_wtm_wbi_fch, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time (no wt. arthropods, no w. fish, no bees, no f. fish, no wt. mammals, no w. birds, no chickens)",
y = "Population (alive at any time)",
x = "Year") +
theme_minimal()
ggsave(file.path(pop_trends_dir, "population_trends_n_wta_wfi_fbe_ffi_wtm_wbi_fch.pdf"),
plot = p_n_wta_wfi_fbe_ffi_wtm_wbi_fch, width = 10, height = 6)
# No wt. arthropods, no w. fish, no bees, no f. fish, no wt. mammals, no w. birds, no chickens, no humans
filtered_n_wta_wfi_fbe_ffi_wtm_wbi_fch_hum <- filtered_n_wta_wfi_fbe_ffi_wtm_wbi_fch %>%
filter(Category != "Humans")
p_n_wta_wfi_fbe_ffi_wtm_wbi_fch_hum <- ggplot(filtered_n_wta_wfi_fbe_ffi_wtm_wbi_fch_hum, aes(x = Year, y = aliveatanytime, colour = Category, group = interaction(Group, Category))) +
geom_line() +
labs(title = "Population Over Time (no wt. arthropods, no w. fish, no bees, no f. fish, no wt. mammals, no w. birds, no chickens, no humans)",
y = "Population (alive at any time)",
x = "Year") +
theme_minimal()
ggsave(file.path(pop_trends_dir, "population_trends_n_wta_wfi_fbe_ffi_wtm_wbi_fch_hum.pdf"),
plot = p_n_wta_wfi_fbe_ffi_wtm_wbi_fch_hum, width = 10, height = 6)
return(results_list)
}
# Example usage:
# # Run a single analysis combination
# results_isoelastic_WR <- run_complete_welfare_analysis(
#   human_data_path = "dat/world_bank/world_bank_pop_gdp_clean.xlsx",
#   farmed_animal_data_path = "first_pass/calc_tseries.xlsx",
#   welfare_level_method = "isoelastic",
#   welfare_potential_method = "WR",
#   output_base_dir = "first_pass/welfare_results",
#   create_visualizations = TRUE
# )
#
# # Or run all combinations at once
# all_results <- run_all_welfare_method_combinations(
#   human_data_path = "dat/world_bank/world_bank_pop_gdp_clean.xlsx",
#   farmed_animal_data_path = "first_pass/calc_tseries.xlsx",
#   output_base_dir = "first_pass/welfare_results",
#   create_visualizations = TRUE
# )
#Install necessary packages
# install.packages(c("tidyverse", "dplyr", "readr", "ggplot2", "gridExtra",
#                    "png", "mgcv", "tidyselect", "stringr", "readxl",
#                    "openxlsx", "foreign", "broom", "knitr", "data.table", "dlm"))
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, dlm,
patchwork, hrbrthemes, scales)
# Source the integration script (which sources the other scripts)
source("second_pass/integration.R")
source("second_pass/welfare_analysis_framework.R")
# ==============================================================================
# FLEXIBLE PRESENTATION CONFIGURATION
# ==============================================================================
presentation_config <- list(
create_presentation_images = TRUE,
image_format = "png",
image_width = 12,      # Keep reasonable size
image_height = 8,      # Keep reasonable size
image_dpi = 300,       # Keep high DPI for crisp text
# OPTION 1: Specific files (your current need)
specific_files = list(
"NC_net_tot_trends.pdf" = "A1",
"NC_tot_trends.pdf" = "A2",
"NC_tot_trends_n_wta_wfi.pdf" = "A3",
"NC_net_tot_trends_n_wta_wfi.pdf" = "A4",
"NC_net_utility_comp.pdf" = "B1",
"NC_utility_trends.pdf" = "B2",
"NC_utility_trends_n_wta_wfi_with_total.pdf" = "B3",
"NC_net_utility_comp_n_wta_wfi.pdf" = "B4",
"NC_net_utility_comp_nw.pdf" = "B5",
"WR_net_utility_comp.pdf" = "C1",
"WR_utility_trends.pdf" = "C2",
"WR_utility_trends_n_wta_wfi_with_totals.pdf" = "C3",
"WR_net_utility_comp_n_wta_wfi.pdf" = "C4",
"WR_net_utility_comp_n_wta_wfi_fbe.pdf" = "C5",
"WR_net_utility_comp_nw.pdf" = "C6",
"WR_utility_trends_n_wta_wfi_fbe.pdf" = "D1",
"WR_utility_trends_n_wta_wfi_fbe_ffi_fch_wtm_hum.pdf" = "D2"
)
# OPTION 2: Pattern-based (for future flexibility)
# filename_patterns = list(
#   list(regex = "^NC_.*utility.*", prefix = "NC_UTIL"),
#   list(regex = "^WR_.*utility.*", prefix = "WR_UTIL"),
#   list(regex = ".*_trends$", prefix = "TREND")
# )
# OPTION 3: Save all plots as presentation images
# save_all = TRUE
)
# ==============================================================================
# GGSAVE OVERRIDE
# ==============================================================================
# Override the default ggsave function globally
if(!is.null(presentation_config) && presentation_config$create_presentation_images) {
# Create new ggsave function that automatically handles presentation images
ggsave <- function(filename, plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = NA, height = NA, units = c("in", "cm", "mm", "px"),
dpi = 300, limitsize = TRUE, bg = NULL, ...) {
# Call the ORIGINAL ggplot2 ggsave using namespace qualification to avoid recursion
result <- ggplot2:::ggsave(filename = filename, plot = plot, device = device,
path = path, scale = scale, width = width, height = height,
units = units, dpi = dpi, limitsize = limitsize, bg = bg, ...)
# Extract directory and filename info
if(!is.null(path)) {
output_dir <- path
} else {
output_dir <- dirname(filename)
if(output_dir == ".") output_dir <- getwd()
}
base_filename <- tools::file_path_sans_ext(basename(filename))
pdf_filename <- paste0(base_filename, ".pdf")
# Check if this file should get presentation image treatment
should_save <- FALSE
prefix <- ""
# Method 1: Specific filename mapping
if(!is.null(presentation_config$specific_files) &&
pdf_filename %in% names(presentation_config$specific_files)) {
should_save <- TRUE
prefix <- paste0(presentation_config$specific_files[[pdf_filename]], "_")
}
# Method 2: Pattern matching
if(!is.null(presentation_config$filename_patterns)) {
for(pattern in presentation_config$filename_patterns) {
if(grepl(pattern$regex, base_filename)) {
should_save <- TRUE
if(!is.null(pattern$prefix)) {
prefix <- paste0(pattern$prefix, "_")
}
break
}
}
}
# Method 3: Save all
if(is.null(presentation_config$specific_files) &&
is.null(presentation_config$filename_patterns) &&
isTRUE(presentation_config$save_all)) {
should_save <- TRUE
}
# Create presentation image if needed
if(should_save) {
# Create presentation directory
presentation_dir <- file.path(output_dir, "presentation_images")
if(!dir.exists(presentation_dir)) {
dir.create(presentation_dir, recursive = TRUE)
}
# Save presentation image using the ORIGINAL ggplot2 ggsave (no recursion!)
image_ext <- presentation_config$image_format %||% "png"
output_filename <- paste0(prefix, base_filename, ".", image_ext)
output_path <- file.path(presentation_dir, output_filename)
ggplot2:::ggsave(
filename = output_path,
plot = plot,
width = presentation_config$image_width %||% 12,
height = presentation_config$image_height %||% 8,
dpi = presentation_config$image_dpi %||% 300,
device = image_ext
)
cat("Presentation image saved:", output_filename, "\n")
}
return(result)
}
}
# ==============================================================================
# RUN ANALYSIS
# ==============================================================================
all_results <- run_all_welfare_method_combinations(
human_data_path = "dat/world_bank/world_bank_pop_gdp_clean.xlsx",
farmed_animal_data_path = "first_pass/calc_tseries.xlsx",
wild_animal_data_path = "second_pass/wild_calc_tseries.xlsx",
output_base_dir = "fourth_pass/welfare_results",
create_visualizations = TRUE
)
# Restore original ggsave if needed
if(exists("original_ggsave")) {
ggsave <- original_ggsave
rm(original_ggsave)
}
# ==============================================================================
# FINDING MY HEAD
# ==============================================================================
# human_dat = read_xlsx("dat/world_bank/world_bank_pop_gdp_clean.xlsx")
# farmed_dat = read_xlsx("first_pass/calc_tseries.xlsx")
# wild_dat = read_xlsx("second_pass/wild_calc_tseries.xlsx")
# integrated_dat = read_xlsx("fourth_pass/welfare_results/3282/integrated_calc_tseries.xlsx")
View(extended_integrated_dat)
unique(extended_integrated_dat$Group)
# This applies summary() to each group
extended_integrated_dat %>%
group_by(Group) %>%
summarise(across(everything(), summary))
extended_integrated_dat %>%
group_by(group, year) %>%
summarise(
count = n(),
# Add other summary statistics for your variables of interest
.groups = 'drop'  # This ungroupes the result
)
extended_integrated_dat %>%
group_by(Group, Year) %>%
summarise(
count = n(),
# Add other summary statistics for your variables of interest
.groups = 'drop'  # This ungroupes the result
)
extended_integrated_dat %>%
group_by(group) %>%
summarise(
min_year = min(year, na.rm = TRUE),
max_year = max(year, na.rm = TRUE)
)
extended_integrated_dat %>%
group_by(Group) %>%
summarise(
min_year = min(year, na.rm = TRUE),
max_year = max(year, na.rm = TRUE)
)
extended_integrated_dat %>%
group_by(Group) %>%
summarise(
min_year = min(Year, na.rm = TRUE),
max_year = max(Year, na.rm = TRUE)
)
# FINDING MY HEAD
# ==============================================================================
# human_dat = read_xlsx("dat/world_bank/world_bank_pop_gdp_clean.xlsx")
# farmed_dat = read_xlsx("first_pass/calc_tseries.xlsx")
# wild_dat = read_xlsx("second_pass/wild_calc_tseries.xlsx")
# integrated_dat = read_xlsx("fourth_pass/welfare_results/3282/integrated_calc_tseries.xlsx")
# ==============================================================================
# FINDING MY HEAD
# ==============================================================================
# human_dat = read_xlsx("dat/world_bank/world_bank_pop_gdp_clean.xlsx")
# farmed_dat = read_xlsx("first_pass/calc_tseries.xlsx")
# wild_dat = read_xlsx("second_pass/wild_calc_tseries.xlsx")
# integrated_dat = read_xlsx("fourth_pass/welfare_results/3282/integrated_calc_tseries.xlsx")
extended_integrated_dat = read(xlsx("fourth_pass/dat/extended_integrated_calc_tseries.xlsx"))
# ==============================================================================
# FINDING MY HEAD
# ==============================================================================
# human_dat = read_xlsx("dat/world_bank/world_bank_pop_gdp_clean.xlsx")
# farmed_dat = read_xlsx("first_pass/calc_tseries.xlsx")
# wild_dat = read_xlsx("second_pass/wild_calc_tseries.xlsx")
# integrated_dat = read_xlsx("fourth_pass/welfare_results/3282/integrated_calc_tseries.xlsx")
extended_integrated_dat = read_xlsx("fourth_pass/dat/extended_integrated_calc_tseries.xlsx")
View(extended_integrated_dat)
extended_integrated_dat %>%
group_by(Group) %>%
summarise(
min_year = min(Year, na.rm = TRUE),
max_year = max(Year, na.rm = TRUE)
)
summary(extended_integrated_dat)
