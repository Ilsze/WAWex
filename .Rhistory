fao_aqua_codes_subset <- fao_aqua_codes[, c("X3A_Code", "Name_En", "Scientific_Name", "Major_Group")]
# Merge datasets
fao_aqua <- merge(fao_aqua_dat, fao_aqua_codes_subset,
by.x = "SPECIES.ALPHA_3_CODE", by.y = "X3A_Code",
all.x = TRUE) %>%
#filter only PISCES
filter(Major_Group == "PISCES") %>%
#sum by year
group_by(PERIOD) %>%
summarise(Total_tlw = sum(VALUE, na.rm=TRUE)) %>%
arrange(PERIOD) %>%
#proportional change
mutate(ton_prop_change = 1 + (Total_tlw - lag(Total_tlw))/lag(Total_tlw))
#load aquaculture data
fao_aqua_dat <- read_csv("dat/fao/Aquaculture_Quantity.csv")
#load aquaculture codes
fao_aqua_codes <- read.csv("dat/fao/CL_FI_SPECIES_GROUPS.csv")
#match fao_aqua_codes' Major_groups with fao_aqua_dat
# Select relevant columns from fao_aqua_codes
fao_aqua_codes_subset <- fao_aqua_codes[, c("X3A_Code", "Name_En", "Scientific_Name", "Major_Group")]
# Merge datasets
fao_aqua <- merge(fao_aqua_dat, fao_aqua_codes_subset,
by.x = "SPECIES.ALPHA_3_CODE", by.y = "X3A_Code",
all.x = TRUE) %>%
#filter only PISCES
filter(Major_Group == "PISCES")
fao_aqua_prop_change <- fao_aqua %>%
#sum by year
group_by(PERIOD) %>%
summarise(Total_tlw = sum(VALUE, na.rm=TRUE)) %>%
arrange(PERIOD) %>%
#proportional change
mutate(ton_prop_change = 1 + (Total_tlw - lag(Total_tlw))/lag(Total_tlw))
View(fao_aqua_prop_change)
#save fao aqua clean
write.xlsx(fao_aqua, "dat/fao/fao_aquaculture_clean.xlsx")
#save aquaculture prop_change
write.xlsx(fao_aqua_prop_change, "dat/fao/fao_aquaculture_prop_change.xlsx")
#match fao_aqua_codes' Major_groups with fao_aqua_dat
# Select relevant columns from fao_aqua_codes
fao_aqua_codes_subset <- fao_aqua_codes[, c("X3A_Code", "Name_En", "Scientific_Name", "Major_Group")]
# Merge datasets
fao_aqua <- merge(fao_aqua_dat, fao_aqua_codes_subset,
by.x = "SPECIES.ALPHA_3_CODE", by.y = "X3A_Code",
all.x = TRUE) %>%
#filter only PISCES
filter(Major_Group == "PISCES") %>%
arrange(PERIOD)
#save fao aqua clean
write.xlsx(fao_aqua, "dat/fao/fao_aquaculture_clean.xlsx")
#load aquaculture data
fao_aqua_dat <- read_csv("dat/fao/Aquaculture_Quantity.csv")
#load aquaculture codes
fao_aqua_codes <- read.csv("dat/fao/CL_FI_SPECIES_GROUPS.csv")
#match fao_aqua_codes' Major_groups with fao_aqua_dat
# Select relevant columns from fao_aqua_codes
fao_aqua_codes_subset <- fao_aqua_codes[, c("X3A_Code", "Name_En", "Scientific_Name", "Major_Group")]
# Merge datasets
fao_aqua <- merge(fao_aqua_dat, fao_aqua_codes_subset,
by.x = "SPECIES.ALPHA_3_CODE", by.y = "X3A_Code",
all.x = TRUE) %>%
#filter only PISCES
filter(Major_Group == "PISCES")
View(fao_aqua)
library(dplyr)
library(tidyr)
# Get min and max year for each species
species_year_range <- fao_aqua %>%
group_by(SPECIES.ALPHA_3_CODE) %>%
summarise(min_year = min(PERIOD, na.rm = TRUE),
max_year = max(PERIOD, na.rm = TRUE))
# Create a full sequence of years for each species and find missing years
missing_years <- fao_aqua %>%
select(SPECIES.ALPHA_3_CODE, PERIOD) %>%
distinct() %>%  # Remove duplicates
group_by(SPECIES.ALPHA_3_CODE) %>%
complete(PERIOD = full_seq(PERIOD, 1)) %>%  # Create full year range
filter(is.na(SPECIES.ALPHA_3_CODE)) %>%  # Identify missing years
select(SPECIES.ALPHA_3_CODE, PERIOD)  # Keep only species and missing years
# Display the results
species_year_range
missing_years
View(missing_years)
View(species_year_range)
median(species_year_range$min_year)
median(species_year_range$max_year)
min(species_year_range$min_year)
View(fao_aqua)
#sum by year
group_by(PERIOD, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
summarise(Total_tlw = sum(VALUE, na.rm=TRUE)) %>%
arrange(PERIOD) %>%
#proportional change
mutate(ton_prop_change = 1 + (Total_tlw - lag(Total_tlw))/lag(Total_tlw))
#load aquaculture data
fao_aqua_dat <- read_csv("dat/fao/Aquaculture_Quantity.csv")
#load aquaculture codes
fao_aqua_codes <- read.csv("dat/fao/CL_FI_SPECIES_GROUPS.csv")
#match fao_aqua_codes' Major_groups with fao_aqua_dat
# Select relevant columns from fao_aqua_codes
fao_aqua_codes_subset <- fao_aqua_codes[, c("X3A_Code", "Name_En", "Scientific_Name", "Major_Group")]
# Merge datasets
fao_aqua <- merge(fao_aqua_dat, fao_aqua_codes_subset,
by.x = "SPECIES.ALPHA_3_CODE", by.y = "X3A_Code",
all.x = TRUE) %>%
#filter only PISCES
filter(Major_Group == "PISCES")
#check period range by species
# Get min and max year for each species
# Note that this is just a rough idea. More technically, one should separate
# country code, area code, and environment code.
species_year_range <- fao_aqua %>%
group_by(SPECIES.ALPHA_3_CODE) %>%
summarise(min_year = min(PERIOD, na.rm = TRUE),
max_year = max(PERIOD, na.rm = TRUE))
## finding: median min year is 1991, median max year is 2022
fao_aqua_prop_change <- fao_aqua %>%
#sum by year
group_by(PERIOD, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
summarise(Total_tlw = sum(VALUE, na.rm=TRUE)) %>%
arrange(PERIOD) %>%
#proportional change
mutate(ton_prop_change = 1 + (Total_tlw - lag(Total_tlw))/lag(Total_tlw))
View(fao_aqua_prop_change)
fao_aqua_prop_change <- fao_aqua %>%
group_by(PERIOD, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
summarise(Total_tlw = sum(VALUE, na.rm = TRUE)) %>%
arrange(COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE, PERIOD) %>%  # Ensure correct ordering
group_by(COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%  # Lag should respect these groups
mutate(ton_prop_change = 1 + (Total_tlw - lag(Total_tlw)) / lag(Total_tlw)) %>%
ungroup()  # Always good practice to ungroup after mutate
#proportional change year-on-year at the species-country-area-environment level
fao_aqua_prop_change <- fao_aqua %>%
group_by(SPECIES.ALPHA_3_CODE, PERIOD, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
arrange(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE, PERIOD) %>%  # Ensure correct ordering
group_by(COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%  # Lag should respect these groups
mutate(ton_prop_change = 1 + (Total_tlw - lag(Total_tlw)) / lag(Total_tlw)) %>%
ungroup()  # Always good practice to ungroup after mutate
#proportional change year-on-year at the species-country-area-environment level
fao_aqua_prop_change <- fao_aqua %>%
group_by(SPECIES.ALPHA_3_CODE, PERIOD, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
arrange(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE, PERIOD) %>%  # Ensure correct ordering
group_by(COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%  # Lag should respect these groups
mutate(ton_prop_change = 1 + (VALUE - lag(VALUE)) / lag(VALUE)) %>%
ungroup()  # Always good practice to ungroup after mutate
?group_by
# Compute time-averaged VALUE per species-country-area-environment
avg_value <- fao_aqua %>%
group_by(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
summarise(avg_VALUE = mean(VALUE, na.rm = TRUE), .groups = "drop")
View(avg_value)
#proportional change year-on-year at the species-country-area-environment level
fao_aqua_prop_change <- fao_aqua %>%
group_by(SPECIES.ALPHA_3_CODE, PERIOD, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
arrange(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE, PERIOD) %>%  # Ensure correct ordering
group_by(COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%  # Lag should respect these groups
mutate(ton_prop_change = 1 + (VALUE - lag(VALUE)) / lag(VALUE)) %>%
ungroup()  # Always good practice to ungroup after mutate
# Compute time-averaged VALUE (tlw) per species-country-area-environment
avg_value <- fao_aqua %>%
group_by(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
summarise(avg_VALUE = mean(VALUE, na.rm = TRUE), .groups = "drop")
#proportional change year-on-year at the major group (pisces) level
fao_aqua_agg_prop_change <- fao_aqua_prop_change %>%
#merge average tlw values into fao_aqua_prop_change dataset
left_join(avg_value, by = c("SPECIES.ALPHA_3_CODE", "COUNTRY.UN_CODE", "AREA.CODE", "ENVIRONMENT.ALPHA_2_CODE")) %>%
group_by(SPECIES.ALPHA_3_CODE, PERIOD) %>%
#Weight rows according to average tonnage at the species-country-area-environment level [UTH]
summarise(
avg_prop_change = exp( #exp, sum and log, necessary for geometric mean. placement of avg_VALUE is for "weighted geometric mean"
sum(
log(ton_prop_change[is.finite(log(ton_prop_change))]) * avg_VALUE[is.finite(log(ton_prop_change))], #is.finite ensures na, NaN, and Inf values are excluded
na.rm = TRUE
) / sum(avg_VALUE[is.finite(log(ton_prop_change))], na.rm = TRUE)
),
.groups = "drop"
) %>%
ungroup()
View(fao_aqua_agg_prop_change)
fao_aqua_agg_prop_change <- fao_aqua_prop_change %>%
left_join(avg_value, by = c("SPECIES.ALPHA_3_CODE", "COUNTRY.UN_CODE", "AREA.CODE", "ENVIRONMENT.ALPHA_2_CODE")) %>%
filter(is.finite(log(ton_prop_change))) %>%  # Remove problematic values before computation
group_by(SPECIES.ALPHA_3_CODE, PERIOD) %>%
summarise(
sum_weights = sum(avg_VALUE, na.rm = TRUE),  # Store denominator separately
weighted_log_sum = sum(log(ton_prop_change) * avg_VALUE, na.rm = TRUE),  # Store numerator separately
avg_prop_change = ifelse(sum_weights > 0, exp(weighted_log_sum / sum_weights), NA_real_),  # Avoid division by zero
.groups = "drop"
) %>%
select(SPECIES.ALPHA_3_CODE, PERIOD, avg_prop_change)
#proportional change year-on-year at the major group (pisces) level
fao_aqua_agg_prop_change <- fao_aqua_prop_change %>%
#merge average tlw values into fao_aqua_prop_change dataset
left_join(avg_value, by = c("SPECIES.ALPHA_3_CODE", "COUNTRY.UN_CODE", "AREA.CODE", "ENVIRONMENT.ALPHA_2_CODE")) %>%
group_by(PERIOD) %>%
#Weight rows according to average tonnage at the species-country-area-environment level [UTH]
summarise(
avg_prop_change = exp( #exp, sum and log, necessary for geometric mean. placement of avg_VALUE is for "weighted geometric mean"
sum(
log(ton_prop_change[is.finite(log(ton_prop_change))]) * avg_VALUE[is.finite(log(ton_prop_change))], #is.finite ensures na, NaN, and Inf values are excluded
na.rm = TRUE
) / sum(avg_VALUE[is.finite(log(ton_prop_change))], na.rm = TRUE)
),
.groups = "drop"
) %>%
ungroup()
#save aquaculture prop_change
write.xlsx(fao_aqua_agg_prop_change, "dat/fao/fao_aquaculture_prop_change.xlsx")
#save aquaculture prop_change
write.xlsx(fao_aqua_agg_prop_change, "dat/fao/fao_aquaculture_prop_change.xlsx")
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, rlang)
?sym
?group_by
#proportional change trends.
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, rlang)
?group_by
##################### PROP CHANGE DATA #######################################
#proportional change year-on-year at the species-country-area-environment level
fao_aqua_prop_change <- fao_aqua %>%
arrange(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE, PERIOD) %>% #the non-PERIOD variables don't really matter here, but looks better visually
group_by(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
mutate(ton_prop_change = 1 + (VALUE - lag(VALUE)) / lag(VALUE)) %>%
ungroup()
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table)
#load aquaculture data
fao_aqua_dat <- read_csv("dat/fao/Aquaculture_Quantity.csv")
#load aquaculture codes
fao_aqua_codes <- read.csv("dat/fao/CL_FI_SPECIES_GROUPS.csv")
#match fao_aqua_codes' Major_groups with fao_aqua_dat
# Select relevant columns from fao_aqua_codes
fao_aqua_codes_subset <- fao_aqua_codes[, c("X3A_Code", "Name_En", "Scientific_Name", "Major_Group")]
# Merge datasets
fao_aqua <- merge(fao_aqua_dat, fao_aqua_codes_subset,
by.x = "SPECIES.ALPHA_3_CODE", by.y = "X3A_Code",
all.x = TRUE) %>%
#filter only PISCES
filter(Major_Group == "PISCES")
#check period range by species
# Get min and max year for each species
# Note that this is just a rough idea. More technically, one should separate
# country code, area code, and environment code.
species_year_range <- fao_aqua %>%
group_by(SPECIES.ALPHA_3_CODE) %>%
summarise(min_year = min(PERIOD, na.rm = TRUE),
max_year = max(PERIOD, na.rm = TRUE))
## finding: median min year is 1991, median max year is 2022
##################### PROP CHANGE DATA #######################################
#proportional change year-on-year at the species-country-area-environment level
fao_aqua_prop_change <- fao_aqua %>%
arrange(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE, PERIOD) %>% #the non-PERIOD variables don't really matter here, but looks better visually
group_by(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
mutate(ton_prop_change = 1 + (VALUE - lag(VALUE)) / lag(VALUE)) %>%
ungroup()
# Always good practice to ungroup after mutate
# Compute time-averaged VALUE (tlw) per species-country-area-environment
avg_value <- fao_aqua %>%
group_by(SPECIES.ALPHA_3_CODE, COUNTRY.UN_CODE, AREA.CODE, ENVIRONMENT.ALPHA_2_CODE) %>%
summarise(avg_VALUE = mean(VALUE, na.rm = TRUE), .groups = "drop")
#proportional change year-on-year at the major group (pisces) level
fao_aqua_agg_prop_change <- fao_aqua_prop_change %>%
#merge average tlw values into fao_aqua_prop_change dataset
left_join(avg_value, by = c("SPECIES.ALPHA_3_CODE", "COUNTRY.UN_CODE", "AREA.CODE", "ENVIRONMENT.ALPHA_2_CODE")) %>%
group_by(PERIOD) %>%
#Weight rows according to average tonnage at the species-country-area-environment level [UTH]
summarise(
avg_prop_change = exp( #exp, sum and log, necessary for geometric mean. placement of avg_VALUE is for "weighted geometric mean"
sum(
log(ton_prop_change[is.finite(log(ton_prop_change))]) * avg_VALUE[is.finite(log(ton_prop_change))], #is.finite ensures na, NaN, and Inf values are excluded
na.rm = TRUE
) / sum(avg_VALUE[is.finite(log(ton_prop_change))], na.rm = TRUE)
),
.groups = "drop"
) %>%
ungroup()
#save fao aqua clean
# write.xlsx(fao_aqua, "dat/fao/fao_aquaculture_clean.xlsx")
#Commented out bc missing head-tail values weren't filled in
#save aquaculture prop_change
write.xlsx(fao_aqua_agg_prop_change, "dat/fao/fao_aquaculture_prop_change.xlsx")
output_dat <- compute_prop_change(dat = fao_aqua,
species_col = "SPECIES.ALPHA_3_CODE",
country_col = "COUNTRY.UN_CODE",
area_col = "AREA.CODE",
environment_col = "ENVIRONMENT.ALPHA_2_CODE",
period_col = "PERIOD",
value_col = "VALUE")
#This file contains a helper function for the calculation of weighted
#proportional change trends.
library(pacman)
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, rlang)
################ PROPORTIONAL CHANGE CALCUALTION ###############################
compute_prop_change <- function(dat,
species_col,
country_col,
area_col,
environment_col,
period_col,
value_col) {
# Convert string inputs to symbols for tidy evaluation
species_sym <- sym(species_col)
country_sym <- sym(country_col)
area_sym <- sym(area_col)
environment_sym <- sym(environment_col)
period_sym <- sym(period_col)
value_sym <- sym(value_col)
# 1. Compute proportional change at the species-country-area-environment level.
#    The lag is computed within groups defined by country, area, and environment.
dat_prop_change <- dat %>%
arrange(!!species_sym, !!country_sym, !!area_sym, !!environment_sym, !!period_sym) %>%
group_by(!!species_sym, !!country_sym, !!area_sym, !!environment_sym) %>%
mutate(ton_prop_change = 1 + ((!!value_sym) - lag(!!value_sym)) / lag(!!value_sym)) %>%
ungroup()
# 2. Compute time-averaged value per species-country-area-environment.
avg_value <- dat %>%
group_by(!!species_sym, !!country_sym, !!area_sym, !!environment_sym) %>%
summarise(avg_VALUE = mean(!!value_sym, na.rm = TRUE), .groups = "drop")
# 3. Merge the average value into the proportional change data.
dat_prop_change <- dat_prop_change %>%
left_join(avg_value, by = c(species_col, country_col, area_col, environment_col))
# 4. Aggregate to compute the weighted geometric mean of the proportional change by period.
#    Note: is.finite(log(...)) is used to filter out non-finite values.
result <- dat_prop_change %>%
group_by(!!period_sym) %>%
summarise(
avg_prop_change = exp(
sum(
log(ton_prop_change[is.finite(log(ton_prop_change))]) *
avg_VALUE[is.finite(log(ton_prop_change))],
na.rm = TRUE
) / sum(avg_VALUE[is.finite(log(ton_prop_change))], na.rm = TRUE)
),
.groups = "drop"
)
return(result)
}
# Example usage:
output_dat <- compute_prop_change(dat = fao_aqua,
species_col = "SPECIES.ALPHA_3_CODE",
country_col = "COUNTRY.UN_CODE",
area_col = "AREA.CODE",
environment_col = "ENVIRONMENT.ALPHA_2_CODE",
period_col = "PERIOD",
value_col = "VALUE")
output_dat == fao_aqua_agg_prop_change
p_load(tidyverse, dplyr, readr, ggplot2, gridExtra, png, mgcv, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, minpack.lm)
#calculate weight on insect consumption by non-western humans
#load un world pop data
un_pop_dat <- read_excel("dat/un/un_w5025.xlsx")
View(un_pop_dat)
names(un_pop_dat)
#calculate weight on insect consumption by non-western humans
#load un world pop data
#select only 2020 time and only insect eating countries
un_insect_eating_pop <- read_csv("dat/un/unpopulation_dataportal_20250211133511.csv")
names(un_insect_eating_pop)
View(un_insect_eating_pop)
unique(un_insect_eating_pop$Location)
un_dat <- read_csv("dat/un/WPP2024_Population1JanuaryBySingleAgeSex_Medium_1950-2023.csv")
View(WPP2024_Population1JanuaryBySingleAgeSex_Medium_1950_2023)
library(readr)
WPP2024_Population1JanuaryBySingleAgeSex_Medium_1950_2023 <- read_csv("dat/un/WPP2024_Population1JanuaryBySingleAgeSex_Medium_1950-2023.csv")
View(WPP2024_Population1JanuaryBySingleAgeSex_Medium_1950_2023)
################# TO GET 2020 POPULATIONS OF INSECT-EATING COUNTRIES ##########
un_dat <- read_csv("dat/un/WPP2024_Population1JanuaryBySingleAgeSex_Medium_1950-2023.csv")
unique(un_dat$Location)
un_dat <- read_csv("dat/un/WPP2024_Population1JanuaryBySingleAgeSex_Medium_1950-2023.csv")
#list insect-eating countries the way they appear in the un data
ins_eat_countries <- c(
"Lesotho", "Burundi", "Cameroon", "Democratic Republic of the Congo",
"Central African Republic", "South Sudan", "Zambia", "Burkina Faso",
"Angola", "Botswana", "Niger", "Zimbabwe", "Malawi", "South Africa",
"India", "China", "Indonesia", "Lao People's Democratic Republic",
"Thailand", "Japan", "Brazil", "Venezuela (Bolivarian Republic of)",
"Ecuador", "Colombia", "Argentina", "Papua New Guinea",
"Malaysia", "Australia", "Mexico"
)
#insect-eating locations that don't appear in the data: Kalimantan, sinai desert; I leave out
un_insect_eating_pop <- un_dat %>%
#select countries
filter(Location %in% ins_eat_countries, Time == 2020)
un_dat <- read_csv("dat/un/WPP2024_Population1JanuaryBySingleAgeSex_Medium_1950-2023.csv")
#list insect-eating countries the way they appear in the un data
ins_eat_countries <- c(
"Lesotho", "Burundi", "Cameroon", "Democratic Republic of the Congo",
"Central African Republic", "South Sudan", "Zambia", "Burkina Faso",
"Angola", "Botswana", "Niger", "Zimbabwe", "Malawi", "South Africa",
"India", "China", "Indonesia", "Lao People's Democratic Republic",
"Thailand", "Japan", "Brazil", "Venezuela (Bolivarian Republic of)",
"Ecuador", "Colombia", "Argentina", "Papua New Guinea",
"Malaysia", "Australia", "Mexico"
)
#insect-eating locations that don't appear in the data: Kalimantan, sinai desert; I leave out
un_insect_eating_pop <- un_dat %>%
#select countries
filter(Location %in% ins_eat_countries, Time == 2020)
View(un_dat)
View(un_insect_eating_pop)
ins_eat_countries <- c(
"Lesotho", "Burundi", "Cameroon", "Democratic Republic of the Congo",
"Central African Republic", "South Sudan", "Zambia", "Burkina Faso",
"Angola", "Botswana", "Niger", "Zimbabwe", "Malawi", "South Africa",
"India", "China", "Indonesia", "Lao People's Democratic Republic",
"Thailand", "Japan", "Brazil", "Venezuela (Bolivarian Republic of)",
"Ecuador", "Colombia", "Argentina", "Papua New Guinea",
"Malaysia", "Australia", "Mexico"
)
#insect-eating locations that don't appear in the data: Kalimantan, sinai desert; I leave out
un_insect_eating_pop <- un_dat %>%
#select countries
filter(Location %in% ins_eat_countries, Time == 2020) %>%
#select only population
select(PopTotal)
un_insect_eating_pop <- un_dat %>%
#select countries
filter(Location %in% ins_eat_countries, Time == 2020)
View(un_insect_eating_pop)
un_insect_eating_pop <- un_dat %>%
#select countries
filter(Location %in% ins_eat_countries, Time == 2020) %>%
#sum over age group for sanity check
group_by(Location) %>%
summarise(PopTot = sum(PopTotal, na.rm = TRUE)) %>%
ungroup()
un_insect_eating_pop <- un_dat %>%
#select countries
filter(Location %in% ins_eat_countries, Time == 2020) %>%
#sum over age group for sanity check
group_by(Location) %>%
summarise(PopTot = sum(PopTotal, na.rm = TRUE)) %>%
ungroup() %>%
#convert thousands population unit
mutate(PopTot = Poptot*1000)
un_insect_eating_pop <- un_dat %>%
#select countries
filter(Location %in% ins_eat_countries, Time == 2020) %>%
#sum over age group for sanity check
group_by(Location) %>%
summarise(PopTot = sum(PopTotal, na.rm = TRUE)) %>%
ungroup() %>%
#convert thousands population unit
mutate(PopTot = PopTot*1000)
View(un_pop_dat)
#write to file
write.xlsx(un_insect_eating_pop, "dat/un/un_insect_eating_pop.xlsx")
#calculate weight on insect consumption by non-western humans
#load un world pop data
#select only 2020 time and only insect eating countries
un_insect_eating_pop <- read_csv("dat/un/un_insect_eating_pop.xlsx")
#calculate weight on insect consumption by non-western humans
#load un world pop data
#select only 2020 time and only insect eating countries
un_insect_eating_pop <- read_xlsx("dat/un/un_insect_eating_pop.xlsx")
insects_eaten_per_capita <- 0.00010714
total_insect_eaters <- sum(un_insect_eating_pop$PopTot) * insects_eaten_per_capita
total_insect_eaters <- sum(un_insect_eating_pop$PopTot)
total_insect_eaters
total_insects_eaten <- total_insect_eaters * insects_eaten_per_capita
total_insects_eaten
sum(7.088,
8.5645,
19.3165,
161.52,
6.2508,
0.45,
0.001,
)
sum(7.088,
8.5645,
19.3165,
161.52,
6.2508,
0.45,
0.001)
sum(7.088,
8.5645,
19.3165,
16.152,
6.2508,
0.45,
0.001)
1/57.8228
factor <- 0.01729422
c(7.088,
8.5645,
19.3165,
16.152,
6.2508,
0.45,
0.001
) * factor
7.088*0.01729422
sum(1.225814e-01 ,
1.481163e-01 ,
3.340638e-01 ,
2.793362e-01 ,
1.081027e-01 ,
7.782399e-03,
1.729422e-05
)
#google sheet produces the following weights for insect backcasting trends:
pet_food_weight <- 1.225814e-01
layer_feed_weight <- 1.481163e-01
broiler_feed_weight <- 3.340638e-01
swine_feed_weight <- 2.793362e-01
