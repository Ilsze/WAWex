select(-Loss_med, -loss_diff_from_ref)
# For mammals: use the exponential model data
wild_mammals_df <- data.frame(
Year = other_wild_years,
Category = "Wild terrestrial mammals",
stringsAsFactors = FALSE
) %>%
left_join(mammal_populations, by = "Year") %>%
rename(aliveatanytime = population)
# For fish and arthropods: use the formula-based populations
wild_fish_df <- data.frame(
Year = other_wild_years,
Category = "Wild fish",
stringsAsFactors = FALSE
) %>%
mutate(aliveatanytime = 2e13 - (Year - 1950) * 1e10)
wild_arthropods_df <- data.frame(
Year = other_wild_years,
Category = "Wild terrestrial arthropods",
stringsAsFactors = FALSE
) %>%
mutate(aliveatanytime = 1e19 + (Year - 1950) * 1e16)
# Combine all dataframes
wild_animals_df <- bind_rows(
wild_birds_df,
wild_mammals_df,
wild_fish_df,
wild_arthropods_df
)
# Add the Group column
wild_animals_df$Group <- "Wild Animals"
# Join with the categories dataframe to add the parameter values
wild_animals_df <- wild_animals_df %>%
left_join(wild_categories, by = "Category")
# Calculate utility metrics
wild_animals_df <- wild_animals_df %>%
mutate(
WR_utility = aliveatanytime * WR_potential * Welfare_level,
NC_utility = aliveatanytime * NC_potential * Welfare_level
)
# Save to file if specified
if(!is.null(output_file)) {
write.xlsx(wild_animals_df, output_file, rowNames = FALSE)
cat("Wild animal dataset saved to", output_file, "\n")
}
return(wild_animals_df)
}
#' Integrate wild animal data with existing calc_tseries
#'
#' @param wild_data Wild animal dataset from generate_wild_animal_dataset()
#' @param calc_tseries Existing welfare analysis dataset
#' @param output_file Optional path to save the integrated dataset
#' @return Integrated dataframe with wild and existing animal data
integrate_wild_animal_data <- function(wild_data, calc_tseries, output_file = NULL) {
# Check if required columns exist in both datasets
required_cols <- c("Year", "Category", "Group", "aliveatanytime",
"WR_potential", "Welfare_level", "forebrain_neurons")
if(!all(required_cols %in% names(wild_data)) || !all(required_cols %in% names(calc_tseries))) {
missing_wild <- setdiff(required_cols, names(wild_data))
missing_calc <- setdiff(required_cols, names(calc_tseries))
error_msg <- ""
if(length(missing_wild) > 0) {
error_msg <- paste0(error_msg, "Missing columns in wild_data: ",
paste(missing_wild, collapse = ", "), ". ")
}
if(length(missing_calc) > 0) {
error_msg <- paste0(error_msg, "Missing columns in calc_tseries: ",
paste(missing_calc, collapse = ", "), ".")
}
stop(error_msg)
}
# Combine the datasets
integrated_data <- bind_rows(calc_tseries, wild_data)
# Ensure both WR and NC columns exist
integrated_data <- ensure_wr_columns(integrated_data)
integrated_data <- ensure_nc_columns(integrated_data)
# Save to file if specified
if(!is.null(output_file)) {
write.xlsx(integrated_data, output_file, rowNames = FALSE)
cat("Integrated dataset saved to", output_file, "\n")
}
return(integrated_data)
}
#' Ensure the dataset has all required WR columns
#'
#' @param data The dataset to check and modify
#' @return Updated dataset with all WR columns
ensure_wr_columns <- function(data) {
# Check if WR columns already exist
if(!("WR_utility" %in% colnames(data))
##|| !("WR_pop" %in% colnames(data))
) {
# If not, calculate them based on available data
if("WR_potential" %in% colnames(data) &&
"aliveatanytime" %in% colnames(data) &&
"Welfare_level" %in% colnames(data)) {
# Calculate WR columns
data <- data %>%
mutate(
#WR_pop = aliveatanytime * WR_potential,
WR_utility = aliveatanytime * WR_potential * Welfare_level
)
} else {
stop("Required columns for WR calculations are missing.")
}
}
return(data)
}
#' Ensure the dataset has all required NC columns
#'
#' @param data The dataset to check and modify
#' @return Updated dataset with all NC columns
ensure_nc_columns <- function(data) {
# Check if NC columns already exist
if(!("NC_utility" %in% colnames(data))
##|| !("NC_pop" %in% colnames(data))
) {
# If not, calculate them based on available data
if("forebrain_neurons" %in% colnames(data) &&
"aliveatanytime" %in% colnames(data) &&
"Welfare_level" %in% colnames(data)) {
# Get human forebrain neurons for relative scaling
human_fneurons <- data %>%
filter(Category == "Humans") %>%
pull(forebrain_neurons) %>%
unique() %>%
.[1]  # Use just the first value
# If no human data is present, use the default value
if(length(human_fneurons) == 0) {
human_fneurons <- 24526000000
}
# Calculate NC columns
data <- data %>%
mutate(
NC_potential = forebrain_neurons / human_fneurons,
#NC_pop = aliveatanytime * NC_potential,
NC_utility = aliveatanytime * NC_potential * Welfare_level
)
} else {
stop("Required columns for NC calculations are missing.")
}
}
return(data)
}
# Example usage:
# Generate wild animal dataset
wild_animals <- generate_wild_animal_dataset(
output_file = "second_pass/wild_calc_tseries.xlsx"
)
wild_calc_tseries <- read_excel("second_pass/wild_calc_tseries.xlsx")
#
# # Integrate with existing calc_tseries
# # First load existing data
#calc_tseries <- read_excel("first_pass/calc_tseries.xlsx")
#
# # Then integrate
# integrated_data <- integrate_wild_animal_data(
#   wild_data = wild_animals,
#   calc_tseries = calc_tseries,
#   output_file = "first_pass/integrated_calc_tseries_with_wild.xlsx"
# )
library(readr)
Capture_Quantity <- read_csv("dat/fao/Capture_Quantity.csv")
View(Capture_Quantity)
process_wild_fish_data <- function(capture_data_path,
reference_count = 6.19825e+14,
reference_year = 2011) {
# Check if the data file exists
if(!file.exists(capture_data_path)) {
stop("Fisheries capture data file not found: ", capture_data_path)
}
# Load the fisheries capture data
capture_data <- read.csv(capture_data_path)
# Check if required columns exist
required_cols <- c("PERIOD", "VALUE", "UN_CODE", "SPECIES.ALPHA_3_CODE")
if(!all(required_cols %in% names(capture_data))) {
missing_cols <- setdiff(required_cols, names(capture_data))
stop("Missing required columns in capture data: ", paste(missing_cols, collapse = ", "))
}
# Process the data: rename columns and aggregate by year
processed_data <- capture_data %>%
rename(Year = PERIOD) %>%
group_by(Year) %>%
summarize(tons_live_weight = sum(VALUE, na.rm = TRUE)) %>%
ungroup() %>%
arrange(Year)
# Calculate year-on-year proportional changes
fish_data <- processed_data %>%
mutate(
prev_tons = lag(tons_live_weight),
prop_change = (tons_live_weight - prev_tons) / prev_tons,
# Replace NA for the first year with 0
prop_change = ifelse(is.na(prop_change), 0, prop_change)
)
# Create a plot of proportional changes over time
p <- ggplot(fish_data, aes(x = Year, y = prop_change)) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Year-on-Year Proportional Change in Fish Capture",
x = "Year",
y = "Proportional Change") +
theme_minimal()
# Save the plot
ggsave("sanity_check/wild_fish_prop_change.pdf", plot = p, width = 10, height = 6)
# Calculate cumulative proportional change relative to reference year
fish_data <- fish_data %>%
mutate(
# Initialize base value as 1 for all rows
relative_cumulative = 1
)
# Iterate through the data to calculate cumulative changes
# We'll do this separately for before and after the reference year
# First, find the index of the reference year
ref_year_idx <- which(fish_data$Year == reference_year)
if(length(ref_year_idx) == 0) {
stop("Reference year ", reference_year, " not found in the data")
}
# For years after the reference year, calculate forward
if(ref_year_idx < nrow(fish_data)) {
for(i in (ref_year_idx + 1):nrow(fish_data)) {
fish_data$relative_cumulative[i] <- fish_data$relative_cumulative[i-1] * (1 + fish_data$prop_change[i])
}
}
# For years before the reference year, calculate backward
if(ref_year_idx > 1) {
for(i in (ref_year_idx - 1):1) {
fish_data$relative_cumulative[i] <- fish_data$relative_cumulative[i+1] / (1 + fish_data$prop_change[i+1])
}
}
# Calculate estimated population based on reference count and relative changes
fish_population <- fish_data %>%
mutate(
aliveatanytime = reference_count * relative_cumulative
) %>%
select(Year, tons_live_weight, prop_change, aliveatanytime)
# Create a plot of estimated population over time
p2 <- ggplot(fish_population, aes(x = Year, y = aliveatanytime)) +
geom_line() +
labs(title = "Estimated Wild Fish Population Over Time",
x = "Year",
y = "Fish Population (count)") +
theme_minimal() +
scale_y_continuous(labels = scales::scientific)
# Save the plot
ggsave("wild_fish_population.pdf", plot = p2, width = 10, height = 6)
# Return the population data
return(fish_population)
}
wild_fish_dat <- process_wild_fish_data("dat/fao/Capture_Quantity.csv")
#' Process fisheries capture data and create wild fish population time series
#'
#' @param capture_data_path Path to the Capture_Quantity.csv file
#' @param reference_count Wild fish reference count (6.19825e+14 for 2011)
#' @param reference_year The reference year for wild fish count (2011)
#' @return DataFrame with years and wild fish population estimates
process_wild_fish_data <- function(capture_data_path,
reference_count = 6.19825e+14,
reference_year = 2011) {
# Check if the data file exists
if(!file.exists(capture_data_path)) {
stop("Fisheries capture data file not found: ", capture_data_path)
}
# Load the fisheries capture data
capture_data <- read.csv(capture_data_path)
# Check if required columns exist
required_cols <- c("PERIOD", "VALUE", "COUNTRY.UN_CODE", "SPECIES.ALPHA_3_CODE")
if(!all(required_cols %in% names(capture_data))) {
missing_cols <- setdiff(required_cols, names(capture_data))
stop("Missing required columns in capture data: ", paste(missing_cols, collapse = ", "))
}
# Process the data: rename columns and aggregate by year
processed_data <- capture_data %>%
rename(Year = PERIOD) %>%
group_by(Year) %>%
summarize(tons_live_weight = sum(VALUE, na.rm = TRUE)) %>%
ungroup() %>%
arrange(Year)
# Calculate year-on-year proportional changes
fish_data <- processed_data %>%
mutate(
prev_tons = lag(tons_live_weight),
prop_change = (tons_live_weight - prev_tons) / prev_tons,
# Replace NA for the first year with 0
prop_change = ifelse(is.na(prop_change), 0, prop_change)
)
# Create a plot of proportional changes over time
p <- ggplot(fish_data, aes(x = Year, y = prop_change)) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Year-on-Year Proportional Change in Fish Capture",
x = "Year",
y = "Proportional Change") +
theme_minimal()
# Save the plot
ggsave("sanity_check/wild_fish_prop_change.pdf", plot = p, width = 10, height = 6)
# Calculate cumulative proportional change relative to reference year
fish_data <- fish_data %>%
mutate(
# Initialize base value as 1 for all rows
relative_cumulative = 1
)
# Iterate through the data to calculate cumulative changes
# We'll do this separately for before and after the reference year
# First, find the index of the reference year
ref_year_idx <- which(fish_data$Year == reference_year)
if(length(ref_year_idx) == 0) {
stop("Reference year ", reference_year, " not found in the data")
}
# For years after the reference year, calculate forward
if(ref_year_idx < nrow(fish_data)) {
for(i in (ref_year_idx + 1):nrow(fish_data)) {
fish_data$relative_cumulative[i] <- fish_data$relative_cumulative[i-1] * (1 + fish_data$prop_change[i])
}
}
# For years before the reference year, calculate backward
if(ref_year_idx > 1) {
for(i in (ref_year_idx - 1):1) {
fish_data$relative_cumulative[i] <- fish_data$relative_cumulative[i+1] / (1 + fish_data$prop_change[i+1])
}
}
# Calculate estimated population based on reference count and relative changes
fish_population <- fish_data %>%
mutate(
aliveatanytime = reference_count * relative_cumulative
) %>%
select(Year, tons_live_weight, prop_change, aliveatanytime)
# Create a plot of estimated population over time
p2 <- ggplot(fish_population, aes(x = Year, y = aliveatanytime)) +
geom_line() +
labs(title = "Estimated Wild Fish Population Over Time",
x = "Year",
y = "Fish Population (count)") +
theme_minimal() +
scale_y_continuous(labels = scales::scientific)
# Save the plot
ggsave("wild_fish_population.pdf", plot = p2, width = 10, height = 6)
# Return the population data
return(fish_population)
}
wild_fish_dat <- process_wild_fish_data("dat/fao/Capture_Quantity.csv")
wild_fish_dat <- process_wild_fish_data("dat/fao/Capture_Quantity.csv")
View(wild_fish_dat)
#' Calculate wild fish population using Sea Around Us database and reference value
#'
#' @param reference_count The reference count of wild fish (6.19825e+14 for 2011)
#' @param reference_year The reference year for wild fish count (2011)
#' @param data_path Path to the Sea Around Us database file
#' @param sheet_name Name of the sheet containing time series data
#' @return DataFrame with years and wild fish population estimates
calculate_wild_fish_population <- function(reference_count = 6.19825e+14,
reference_year = 2011,
data_path = "dat/sea_around_us/RAMLDBv4.66.xlsx",
sheet_name = "timeseries_values_views") {
# Check if the data file exists
if(!file.exists(data_path)) {
stop("Sea Around Us database file not found: ", data_path)
}
# Load the Sea Around Us data from the specified sheet
cat("Loading Sea Around Us database from", data_path, "...\n")
fish_data <- read_excel(data_path, sheet = sheet_name)
# Rename 'year' column to 'Year' for consistency if needed
if("year" %in% names(fish_data) && !"Year" %in% names(fish_data)) {
fish_data <- fish_data %>%
rename(Year = year)
cat("Renamed 'year' column to 'Year' for consistency.\n")
}
# Check if required columns exist
required_cols <- c("stockid", "stocklong", "Year", "TN")
if(!all(required_cols %in% names(fish_data))) {
missing_cols <- setdiff(required_cols, names(fish_data))
stop("Missing required columns in fish data: ", paste(missing_cols, collapse = ", "))
}
# Step 1: Remove rows with NA in TN
fish_data_clean <- fish_data %>%
filter(!is.na(TN))
cat("Removed", nrow(fish_data) - nrow(fish_data_clean), " out of ", nrow(fish_data), " rows due to NA values in TN. \n")
# Step 2: Calculate year-on-year proportional change for each stockid
fish_data_changes <- fish_data_clean %>%
# Group by stockid to calculate changes within each stock
group_by(stockid) %>%
# Sort by Year within each group
arrange(stockid, Year) %>%
# Calculate the change from previous year
mutate(
prev_TN = lag(TN),
prop_change = (TN - prev_TN) / prev_TN #e.g 10 -> 15 will give 5/10 = 0.5, implying + 50% extra abundance. 15 -> 10 will give -5/15 = -0.33, implying -33% abundance.
) %>%
# Remove NA values (first year for each stock will have NA change)
filter(!is.na(prop_change)) %>%
# Keep only necessary columns
select(stockid, stocklong, Year, TN, prop_change)
# Step 3: Create aggregated dataset with weighted average of prop_change
aggregated_changes <- fish_data_changes %>%
# Group by Year to aggregate across all stocks
group_by(Year) %>%
# Calculate weighted average of prop_change, weighted by TN
summarize(
prop_change_agg = weighted.mean(prop_change, w = TN, na.rm = TRUE),
total_TN = sum(TN, na.rm = TRUE)
) %>%
ungroup()
# Find min and max years in the aggregated data
min_year <- min(aggregated_changes$Year)
max_year <- max(aggregated_changes$Year)
# Create a complete sequence of years
all_years <- data.frame(
Year = min_year:max_year
)
# Join with aggregated changes to ensure all years are included
complete_changes <- all_years %>%
left_join(aggregated_changes, by = "Year") %>%
# Fill NA values with 0 (no change) if any years are missing data
mutate(
prop_change_agg = ifelse(is.na(prop_change_agg), 0, prop_change_agg)
)
# Step 4: Calculate absolute fish counts based on reference year and changes
# First, check if reference year exists in the data
if(!(reference_year %in% complete_changes$Year)) {
stop("Reference year ", reference_year, " not found in processed data.")
}
# Get the range of years
years_range <- min_year:max_year
# Initialize population vector with reference count for reference year
populations <- rep(NA, length(years_range))
names(populations) <- years_range ##this is not a dataframe, it just helps with access
populations[as.character(reference_year)] <- reference_count
# Calculate forward from reference year
if(reference_year < max_year) {
for(year in (reference_year + 1):max_year) {
year_idx <- which(complete_changes$Year == year) ##recall that complete_changes is the dataset with Year and prop_change_agg as columns
prev_year_pop <- populations[as.character(year - 1)]
change <- complete_changes$prop_change_agg[year_idx]
populations[as.character(year)] <- prev_year_pop * (1 + change)
}
}
# Calculate backward from reference year
if(reference_year > min_year) {
for(year in (reference_year - 1):min_year) {
year_idx <- which(complete_changes$Year == (year + 1))
next_year_pop <- populations[as.character(year + 1)]
change <- complete_changes$prop_change_agg[year_idx]
# To go backwards, we need to reverse the change formula
populations[as.character(year)] <- next_year_pop / (1 + change)
}
}
# Create final dataset
fish_populations <- data.frame(
Year = years_range,
population = unname(populations)
)
cat("Wild fish population estimates calculated for years", min_year, "to", max_year, ".\n")
return(fish_populations)
}
wild_fish_dat <- calculate_wild_fish_population()
library(pacman)
p_load(tidyverse, dplyr, ggplot2, gridExtra, mgcv, nleqslv, png, readr, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table)
wild_fish_dat <- calculate_wild_fish_population()
View(wild_fish_dat)
# Load required libraries
library(ggplot2)
library(scales)
# Create a visualization of the wild fish population
fish_plot <- ggplot(wild_fish_dat, aes(x = Year, y = population)) +
geom_line(color = "steelblue", linewidth = 1) +
geom_point(color = "steelblue3", size = 2, alpha = 0.7) +
# Add a reference point for 2011
geom_point(data = subset(wild_fish_dat, Year == 2011),
aes(x = Year, y = population),
color = "darkred", size = 3) +
geom_text(data = subset(wild_fish_dat, Year == 2011),
aes(label = "Reference Year"),
hjust = -0.2, vjust = -0.5, color = "darkred") +
# Format the y-axis to use scientific notation with fewer digits
scale_y_continuous(labels = function(x) format(x, scientific = TRUE, digits = 2)) +
# Add title and labels
labs(
title = "Wild Fish Population Estimates Over Time",
subtitle = paste("Based on reference count of", format(6.19825e+14, scientific = TRUE), "in 2011"),
x = "Year",
y = "Population (individuals)",
caption = "Data source: Sea Around Us database"
) +
# Use a clean theme
theme_minimal() +
theme(
plot_title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
# Print the plot
print(fish_plot)
# Save the plot as a PDF (optional)
ggsave("wild_fish_population_trend.pdf", fish_plot, width = 10, height = 6)
p_load(tidyverse, dplyr, ggplot2, gridExtra, mgcv, nleqslv, png, readr, tidyselect,
stringr, readxl, openxlsx, foreign, broom, knitr, data.table, icesDatras)
getCPUELength()
?getCPUELength
getCPUELength(survey = "NS-IBTS", year = 1960:2025, quarter = 1:4)
getCPUELength(survey = "NS-IBTS", year = 1960, quarter = 1)
getCPUELength(survey = "NS-IBTS", year = 1960, quarter = 2)
getCPUELength(survey = "NS-IBTS", year = 1960, quarter = 3)
getCPUELength(survey = "NS-IBTS", year = 1960, quarter = 4)
getCPUELength(survey = "NS-IBTS", year = 1961, quarter = 4)
checkSurveyOK(survey = "NS-IBTS")
checkSurveyYearOK(survey = "NS-IBTS", year = 1960, checksurvey = TRUE)
getCPUELength(survey = "NS-IBTS", year = 1965, quarter = 4)
getCPUELength(survey = "NS-IBTS", year = 1965, quarter = 1)
View(getCPUELength(survey = "NS-IBTS", year = yr, quarter = 4))
View(getCPUELength(survey = "NS-IBTS", year = 1965, quarter = 4))
